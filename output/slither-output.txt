'forge clean' running (wd: /home/jason/Documents/software/Anza/anza-finance-core)
'forge build --build-info --force' running
Compiling 134 files with 0.8.20
Solc 0.8.20 finished in 7.45s
Compiler run [33msuccessful with warnings:[0m
[1;33mWarning (6321)[0m[1;37m: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.[0m
  [34m-->[0m contracts/services/LoanTreasurey.sol:54:18:
[34m   |[0m
[34m54 |[0m         returns ([33mbool[0m)
[34m   |[0m                  [1;33m^^^^[0m

[1;33mWarning (6321)[0m[1;37m: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.[0m
  [34m-->[0m contracts/services/LoanTreasurey.sol:99:18:
[34m   |[0m
[34m99 |[0m         returns ([33mbool[0m)
[34m   |[0m                  [1;33m^^^^[0m

[1;33mWarning (5667)[0m[1;37m: Unused function parameter. Remove or comment out the variable name to silence this warning.[0m
   [34m-->[0m contracts/markets/storefronts/AnzaRefinanceStorefront.sol:190:9:
[34m    |[0m
[34m190 |[0m         [33muint256 _termsExpiry[0m,
[34m    |[0m         [1;33m^^^^^^^^^^^^^^^^^^^^[0m

[1;33mWarning (5667)[0m[1;37m: Unused function parameter. Remove or comment out the variable name to silence this warning.[0m
   [34m-->[0m contracts/markets/storefronts/AnzaRefinanceStorefront.sol:241:9:
[34m    |[0m
[34m241 |[0m         [33muint256 _termsExpiry[0m,
[34m    |[0m         [1;33m^^^^^^^^^^^^^^^^^^^^[0m


ERROR:ContractSolcParsing:Missing inheritance LoanTreasurey (b40dc5eec2b3cfdb1842128ab8b81a96)
Missing inheritance ID: 40347
Inheritance found:
	 - AnzaDebtExchange (ID 14089)
	 - LoanAccountant (ID 16148)
	 - AccountantAccessController (ID 796)
	 - AccessControl (ID 27834)
	 - ERC165 (ID 37536)
	 - IERC165 (ID 37548)
	 - IAccessControl (ID 27907)
	 - Context (ID 36534)
	 - IAccountantAccessController (ID 1191)
	 - PaymentBook (ID 3716)
	 - ReentrancyGuard (ID 31626)
	 - PaymentBookAccessController (ID 1068)
	 - IPaymentBookAccessController (ID 1235)
	 - IPaymentBook (ID 3927)
	 - ILoanTreasurey (ID 18243)

INFO:Detectors:
Governor._execute(uint256,address[],uint256[],bytes[],bytes32) (node_modules/@openzeppelin/contracts/governance/Governor.sol#316-328) sends eth to arbitrary user
	Dangerous calls:
	- (success,returndata) = targets[i].call{value: values[i]}(calldatas[i]) (node_modules/@openzeppelin/contracts/governance/Governor.sol#325)
Governor.relay(address,uint256,bytes) (node_modules/@openzeppelin/contracts/governance/Governor.sol#543-550) sends eth to arbitrary user
	Dangerous calls:
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/governance/Governor.sol#548)
TimelockController._execute(address,uint256,bytes) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#348-355) sends eth to arbitrary user
	Dangerous calls:
	- (success) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#353)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations
INFO:Detectors:
AnzaDebtMarket.fallback() (contracts/markets/AnzaDebtMarket.sol#107-122) uses delegatecall to a input-controlled function id
	- (_success,_data) = _storefrontAddress.delegatecall(abi.encodePacked(_calldata)) (contracts/markets/AnzaDebtMarket.sol#116-118)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#controlled-delegatecall
INFO:Detectors:
LoanTreasurey (contracts/services/LoanTreasurey.sol#14-166) inherits from a contract for which the name is reused.
	- Slither could not determine which contract has a duplicate name:
		-AnzaDebtExchange (contracts/markets/AnzaDebtExchange.sol#15-375)
		-LoanAccountant (contracts/services/LoanAccountant.sol#13-204)
		-AccountantAccessController (contracts/access/lending-access/AccountantAccessController.sol#18-97)
		-AccessControl (node_modules/@openzeppelin/contracts/access/AccessControl.sol#49-247)
		-ERC165 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#22-29)
		-IERC165 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#15-25)
		-IAccessControl (node_modules/@openzeppelin/contracts/access/IAccessControl.sol#9-88)
		-Context (node_modules/@openzeppelin/contracts/utils/Context.sol#16-24)
		-IAccountantAccessController (contracts/access/lending-access/interfaces/IAccountantAccessController.sol#4-8)
		-PaymentBook (contracts/databases/lending-databases/PaymentBook.sol#14-192)
		-ReentrancyGuard (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#22-69)
		-PaymentBookAccessController (contracts/access/lending-access/PaymentBookAccessController.sol#7-44)
		-IPaymentBookAccessController (contracts/access/lending-access/interfaces/IPaymentBookAccessController.sol#4-8)
		-IPaymentBook (contracts/databases/lending-databases/interfaces/IPaymentBook.sol#4-25)
		-ILoanTreasurey (contracts/services/interfaces/ILoanTreasurey.sol#4-15)
	- Check if:
		- A inherited contract is missing from this list,
		- The contract are imported from the correct files.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#name-reused
INFO:Detectors:
AnzaBaseMarketParticipant._canceledListings (contracts/databases/market-databases/AnzaBaseMarketParticipant.sol#12) is never initialized. It is used in:
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-state-variables
INFO:Detectors:
ABDKMath64x64.divuu(uint256,uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#735-789) performs a multiplication on the result of a division:
	- result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#768)
	- hi = result * (y >> 128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#771)
ABDKMath64x64.divuu(uint256,uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#735-789) performs a multiplication on the result of a division:
	- result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#768)
	- lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#772)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)
	- inverse = (3 * denominator) ^ 2 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#117)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#121)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#122)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#123)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#124)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#125)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#126)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:
	- prod0 = prod0 / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#105)
	- result = prod0 * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#132)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
TimelockController.isOperationDone(bytes32) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#162-164) uses a dangerous strict equality:
	- getTimestamp(id) == _DONE_TIMESTAMP (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#163)
Checkpoints._insert(Checkpoints.Checkpoint[],uint32,uint224) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#136-161) uses a dangerous strict equality:
	- last._blockNumber == key (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#151)
ERC20Votes._writeCheckpoint(ERC20Votes.Checkpoint[],function(uint256,uint256) returns(uint256),uint256) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol#239-256) uses a dangerous strict equality:
	- pos > 0 && oldCkpt.fromBlock == block.number (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol#251)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
Reentrancy in AnzaDebtExchange._executeDebtExchange(address,uint256,address,address,uint256) (contracts/markets/AnzaDebtExchange.sol#152-209):
	External calls:
	- _payment = __depositPayment(_beneficiary,_debtId,_payment) (contracts/markets/AnzaDebtExchange.sol#178)
		- _loanManager.updateLoanState(_debtId) (contracts/services/LoanAccountant.sol#146)
		- _anzaToken.burnLenderToken(_debtId,_payment) (contracts/databases/lending-databases/PaymentBook.sol#177)
		- _anzaToken.mint(_debtId,_newDebt) (contracts/services/LoanAccountant.sol#201)
		- _anzaToken.burnLenderToken(_debtId,_balance) (contracts/databases/lending-databases/PaymentBook.sol#185)
	State variables written after the call(s):
	- _depositFunds(type()(uint256).max,address(this),_borrower,_payment) (contracts/markets/AnzaDebtExchange.sol#192-197)
		- __withdrawableBalance[_payee] += _amount (contracts/databases/lending-databases/PaymentBook.sol#100)
	PaymentBook.__withdrawableBalance (contracts/databases/lending-databases/PaymentBook.sol#21) can be used in cross function reentrancies:
	- PaymentBook._depositFunds(uint256,address,address,uint256) (contracts/databases/lending-databases/PaymentBook.sol#94-105)
	- PaymentBook.withdrawableBalance(address) (contracts/databases/lending-databases/PaymentBook.sol#72-76)
Reentrancy in LoanAccountant.debtUpdater(uint256) (contracts/services/LoanAccountant.sol#41-64):
	External calls:
	- __updateLoanState(_debtId) < _PAID_STATE_ (contracts/services/LoanAccountant.sol#50)
		- _loanManager.updateLoanState(_debtId) (contracts/services/LoanAccountant.sol#146)
	- __updateDebtWithInterest(_debtId,_lastChecked) (contracts/services/LoanAccountant.sol#52)
		- _anzaToken.mint(_debtId,_newDebt) (contracts/services/LoanAccountant.sol#201)
	State variables written after the call(s):
	- __updateDebtWithInterest(_debtId,_lastChecked) (contracts/services/LoanAccountant.sol#52)
		- __updatePermitted = ! _loanManager.checkLoanExpired(_debtId) && ! _loanManager.checkLoanClosed(_debtId) (contracts/services/LoanAccountant.sol#129-131)
		- __updatePermitted = false (contracts/services/LoanAccountant.sol#79)
Reentrancy in LoanAccountant.debtUpdater(uint256) (contracts/services/LoanAccountant.sol#41-64):
	External calls:
	- __updateLoanState(_debtId) < _PAID_STATE_ (contracts/services/LoanAccountant.sol#50)
		- _loanManager.updateLoanState(_debtId) (contracts/services/LoanAccountant.sol#146)
	- __updateDebtWithInterest(_debtId,_lastChecked) (contracts/services/LoanAccountant.sol#52)
		- _anzaToken.mint(_debtId,_newDebt) (contracts/services/LoanAccountant.sol#201)
	- __updateLoanState(_debtId) (contracts/services/LoanAccountant.sol#59)
		- _loanManager.updateLoanState(_debtId) (contracts/services/LoanAccountant.sol#146)
	State variables written after the call(s):
	- __updatePermitted = false (contracts/services/LoanAccountant.sol#63)
Reentrancy in AnzaToken.mintPair(address,address,uint256,uint256,bytes) (contracts/tokens/AnzaToken.sol#100-112):
	External calls:
	- _mint(_lender,_debtId.debtIdToLenderTokenId(),_amount) (contracts/tokens/AnzaToken.sol#108)
		- IERC1155Receiver(to).onERC1155Received(operator,from,id,amount,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#476-484)
	- _mint(_borrower,_debtId.debtIdToBorrowerTokenId(),1,_collateralURI) (contracts/tokens/AnzaToken.sol#111)
		- IERC1155Receiver(to).onERC1155Received(operator,from,id,amount,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#476-484)
	State variables written after the call(s):
	- _mint(_borrower,_debtId.debtIdToBorrowerTokenId(),1,_collateralURI) (contracts/tokens/AnzaToken.sol#111)
		- __totalSupply[_tokenId] += _amount (contracts/tokens/AnzaTokenCatalog.sol#62)
		- __totalSupply[_tokenId] -= _amount (contracts/tokens/AnzaTokenCatalog.sol#66)
	AnzaTokenCatalog.__totalSupply (contracts/tokens/AnzaTokenCatalog.sol#17) can be used in cross function reentrancies:
	- AnzaTokenCatalog._decrementTotalSupply(uint256,uint256) (contracts/tokens/AnzaTokenCatalog.sol#65-67)
	- AnzaTokenCatalog._incrementTotalSupply(uint256,uint256) (contracts/tokens/AnzaTokenCatalog.sol#61-63)
	- AnzaTokenCatalog.totalSupply(uint256) (contracts/tokens/AnzaTokenCatalog.sol#40-42)
	- _mint(_borrower,_debtId.debtIdToBorrowerTokenId(),1,_collateralURI) (contracts/tokens/AnzaToken.sol#111)
		- _balances[id][to] += amount (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#280)
	ERC1155._balances (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#24) can be used in cross function reentrancies:
	- ERC1155._burn(address,uint256,uint256) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#333-355)
	- ERC1155._mint(address,uint256,uint256,bytes) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#266-286)
	- ERC1155._safeBatchTransferFrom(address,address,uint256[],uint256[],bytes) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#199-230)
	- ERC1155._safeTransferFrom(address,address,uint256,uint256,bytes) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#160-187)
	- ERC1155.balanceOf(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#70-73)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
ERC1155._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).response (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#476) is a local variable never initialized
DebtBook.collateralDebtBalance(address,uint256).i (contracts/databases/lending-databases/DebtBook.sol#117) is a local variable never initialized
ERC1155._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).response (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#498) is a local variable never initialized
ERC1155._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).reason (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#503) is a local variable never initialized
ERC20Votes._moveVotingPower(address,address,uint256).newWeight_scope_1 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol#233) is a local variable never initialized
AnzaToken._beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes).i (contracts/tokens/AnzaToken.sol#190) is a local variable never initialized
ERC1155._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).reason (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#480) is a local variable never initialized
AnzaDebtExchange._executeDebtExchange(address,uint256,address,address,uint256).i (contracts/markets/AnzaDebtExchange.sol#169) is a local variable never initialized
CollateralVault.depositAllowed(address,uint256,uint256)._latestDebtId (contracts/services/CollateralVault.sol#110) is a local variable never initialized
ERC20Votes._moveVotingPower(address,address,uint256).oldWeight_scope_0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol#233) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables
INFO:Detectors:
CollateralVault.depositAllowed(address,uint256,uint256) (contracts/services/CollateralVault.sol#99-115) ignores return value by IDebtBook(_loanContract).collateralDebtAt(_collateralAddress,_collateralId,type()(uint256).max) (contracts/services/CollateralVault.sol#104-114)
LoanCodec._validateLoanTerms(bytes32,uint64,uint256) (contracts/services/LoanCodec.sol#85-183) ignores return value by InterestCalculator.compound(_principal,_fixedInterestRate,_getTotalFirIntervals(_firInterval,_duration)) (contracts/services/LoanCodec.sol#172-182)
Governor._execute(uint256,address[],uint256[],bytes[],bytes32) (node_modules/@openzeppelin/contracts/governance/Governor.sol#316-328) ignores return value by Address.verifyCallResult(success,returndata,errorMessage) (node_modules/@openzeppelin/contracts/governance/Governor.sol#326)
Governor.relay(address,uint256,bytes) (node_modules/@openzeppelin/contracts/governance/Governor.sol#543-550) ignores return value by Address.verifyCallResult(success,returndata,Governor: relay reverted without message) (node_modules/@openzeppelin/contracts/governance/Governor.sol#549)
GovernorVotesQuorumFraction._updateQuorumNumerator(uint256) (node_modules/@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol#99-118) ignores return value by _quorumNumeratorHistory.push(newQuorumNumerator) (node_modules/@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol#115)
ERC1155._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#467-486) ignores return value by IERC1155Receiver(to).onERC1155Received(operator,from,id,amount,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#476-484)
ERC1155._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#488-509) ignores return value by IERC1155Receiver(to).onERC1155BatchReceived(operator,from,ids,amounts,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#497-507)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
TimeLock.constructor(uint256,address[],address[])._minDelay (contracts/dao/TimeLock.sol#8) shadows:
	- TimelockController._minDelay (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#34) (state variable)
AnzaGovernance.constructor(IVotes,TimelockController,uint256,uint256)._timelock (contracts/dao/governance/AnzaGovernance.sol#21) shadows:
	- GovernorTimelockControl._timelock (node_modules/@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol#27) (state variable)
AnzaGovernance.constructor(IVotes,TimelockController,uint256,uint256)._votingDelay (contracts/dao/governance/AnzaGovernance.sol#22) shadows:
	- GovernorSettings._votingDelay (node_modules/@openzeppelin/contracts/governance/extensions/GovernorSettings.sol#14) (state variable)
AnzaGovernance.constructor(IVotes,TimelockController,uint256,uint256)._votingPeriod (contracts/dao/governance/AnzaGovernance.sol#23) shadows:
	- GovernorSettings._votingPeriod (node_modules/@openzeppelin/contracts/governance/extensions/GovernorSettings.sol#15) (state variable)
IDebtBook.lenderDebtBalance(uint256).debtBalance (contracts/databases/lending-databases/interfaces/IDebtBook.sol#14) shadows:
	- IDebtBook.debtBalance(uint256) (contracts/databases/lending-databases/interfaces/IDebtBook.sol#10) (function)
IDebtBook.borrowerDebtBalance(uint256).debtBalance (contracts/databases/lending-databases/interfaces/IDebtBook.sol#18) shadows:
	- IDebtBook.debtBalance(uint256) (contracts/databases/lending-databases/interfaces/IDebtBook.sol#10) (function)
IDebtBook.collateralDebtBalance(address,uint256).debtBalance (contracts/databases/lending-databases/interfaces/IDebtBook.sol#23) shadows:
	- IDebtBook.debtBalance(uint256) (contracts/databases/lending-databases/interfaces/IDebtBook.sol#10) (function)
IDebtBook.collateralDebtAt(uint256,uint256).collateralNonce (contracts/databases/lending-databases/interfaces/IDebtBook.sol#33) shadows:
	- IDebtBook.collateralNonce(address,uint256) (contracts/databases/lending-databases/interfaces/IDebtBook.sol#41-44) (function)
IDebtBook.collateralDebtAt(address,uint256,uint256).collateralNonce (contracts/databases/lending-databases/interfaces/IDebtBook.sol#39) shadows:
	- IDebtBook.collateralNonce(address,uint256) (contracts/databases/lending-databases/interfaces/IDebtBook.sol#41-44) (function)
IDebtBook.collateralNonce(address,uint256).collateralNonce (contracts/databases/lending-databases/interfaces/IDebtBook.sol#44) shadows:
	- IDebtBook.collateralNonce(address,uint256) (contracts/databases/lending-databases/interfaces/IDebtBook.sol#41-44) (function)
AnzaDebtStorefront.constructor(address,address,address)._loanContract (contracts/markets/storefronts/AnzaDebtStorefront.sol#22) shadows:
	- AnzaDebtStorefrontAccessController._loanContract (contracts/access/market-access/AnzaDebtStorefrontAccessController.sol#21) (state variable)
AnzaRefinanceStorefront.constructor(address,address,address)._loanContract (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#24) shadows:
	- AnzaRefinanceStorefrontAccessController._loanContract (contracts/access/market-access/AnzaRefinanceStorefrontAccessController.sol#21) (state variable)
AnzaSponsorshipStorefront.constructor(address,address,address)._loanContract (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#24) shadows:
	- AnzaSponsorshipStorefrontAccessController._loanContract (contracts/access/market-access/AnzaSponsorshipStorefrontAccessController.sol#21) (state variable)
LoanManager.setAnzaToken(address)._anzaToken (contracts/services/LoanManager.sol#60) shadows:
	- DebtBookAccessController._anzaToken (contracts/access/lending-access/DebtBookAccessController.sol#12) (state variable)
LoanManager.setCollateralVault(address)._collateralVault (contracts/services/LoanManager.sol#75) shadows:
	- DebtBookAccessController._collateralVault (contracts/access/lending-access/DebtBookAccessController.sol#13) (state variable)
AnzaBaseToken.constructor(string,string,string)._baseURI (contracts/tokens/AnzaBaseToken.sol#23) shadows:
	- AnzaTokenURIStorage._baseURI (contracts/tokens/AnzaTokenURIStorage.sol#20) (state variable)
AnzaToken.constructor(string)._baseURI (contracts/tokens/AnzaToken.sol#19) shadows:
	- AnzaTokenURIStorage._baseURI (contracts/tokens/AnzaTokenURIStorage.sol#20) (state variable)
ERC20Permit.constructor(string).name (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#44) shadows:
	- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#62-64) (function)
	- IERC20Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#17) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing
INFO:Detectors:
LoanContract.initContract(uint256,address,address,bytes32)._lender (contracts/LoanContract.sol#187) lacks a zero-check on :
		- (_success) = _loanTreasurerAddress.call{value: msg.value}(abi.encodeWithSignature(sponsorPayment(address,uint256),_lender,_debtId)) (contracts/LoanContract.sol#228-234)
LoanContract.initContract(uint256,address,address)._lender (contracts/LoanContract.sol#291) lacks a zero-check on :
		- (_success) = _loanTreasurerAddress.call{value: msg.value}(abi.encodeWithSignature(sponsorPayment(address,uint256),_lender,_debtId)) (contracts/LoanContract.sol#326-332)
Governor.relay(address,uint256,bytes).target (node_modules/@openzeppelin/contracts/governance/Governor.sol#544) lacks a zero-check on :
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/governance/Governor.sol#548)
AnzaDebtMarket.fallback()._storefrontAddress (contracts/markets/AnzaDebtMarket.sol#109) lacks a zero-check on :
		- (_success,_data) = _storefrontAddress.delegatecall(abi.encodePacked(_calldata)) (contracts/markets/AnzaDebtMarket.sol#116-118)
AnzaDebtExchange.executeRefinancePurchase(uint256,address,address,bytes32)._purchaser (contracts/markets/AnzaDebtExchange.sol#250) lacks a zero-check on :
		- (_success) = address(_loanContract).call{value: msg.value}(abi.encodeWithSignature(initContract(uint256,address,address,bytes32),_debtId,_borrower,_purchaser,_contracTerms)) (contracts/markets/AnzaDebtExchange.sol#261-269)
AnzaDebtExchange.executeRefinancePurchase(uint256,address,address,bytes32)._borrower (contracts/markets/AnzaDebtExchange.sol#249) lacks a zero-check on :
		- (_success) = address(_loanContract).call{value: msg.value}(abi.encodeWithSignature(initContract(uint256,address,address,bytes32),_debtId,_borrower,_purchaser,_contracTerms)) (contracts/markets/AnzaDebtExchange.sol#261-269)
AnzaDebtExchange.executeSponsorshipPurchase(uint256,address)._purchaser (contracts/markets/AnzaDebtExchange.sol#301) lacks a zero-check on :
		- (_success) = address(_loanContract).call{value: msg.value}(abi.encodeWithSignature(initContract(uint256,address,address),_debtId,_anzaToken.borrowerOf(_debtId),_purchaser)) (contracts/markets/AnzaDebtExchange.sol#311-318)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
Modifier LoanAccountant.debtUpdater(uint256) (contracts/services/LoanAccountant.sol#41-64) does not always execute _; or revertReference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-modifier
INFO:Detectors:
DebtBook.collateralDebtBalance(address,uint256) (contracts/databases/lending-databases/DebtBook.sol#104-126) has external calls inside a loop: _debtBalance += _anzaToken.totalSupply(_debtMaps[i].debtId.debtIdToLenderTokenId()) (contracts/databases/lending-databases/DebtBook.sol#118-120)
TimelockController._execute(address,uint256,bytes) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#348-355) has external calls inside a loop: (success) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#353)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in AnzaToken._mint(address,uint256,uint256,bytes) (contracts/tokens/AnzaToken.sol#172-180):
	External calls:
	- super._mint(_to,_id,_amount,_data) (contracts/tokens/AnzaToken.sol#178)
		- IERC1155Receiver(to).onERC1155Received(operator,from,id,amount,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#476-484)
	State variables written after the call(s):
	- _setURI(_id,string(_data)) (contracts/tokens/AnzaToken.sol#179)
		- _tokenURIs[tokenId] = tokenURI (contracts/tokens/AnzaTokenURIStorage.sol#64)
Reentrancy in AnzaToken.mintPair(address,address,uint256,uint256,bytes) (contracts/tokens/AnzaToken.sol#100-112):
	External calls:
	- _mint(_lender,_debtId.debtIdToLenderTokenId(),_amount) (contracts/tokens/AnzaToken.sol#108)
		- IERC1155Receiver(to).onERC1155Received(operator,from,id,amount,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#476-484)
	- _mint(_borrower,_debtId.debtIdToBorrowerTokenId(),1,_collateralURI) (contracts/tokens/AnzaToken.sol#111)
		- IERC1155Receiver(to).onERC1155Received(operator,from,id,amount,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#476-484)
	State variables written after the call(s):
	- _mint(_borrower,_debtId.debtIdToBorrowerTokenId(),1,_collateralURI) (contracts/tokens/AnzaToken.sol#111)
		- __owners[_tokenId] = _owner (contracts/tokens/AnzaTokenCatalog.sol#54)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in AnzaDebtStorefront._buyListing(address,uint256,uint256,uint256,bytes) (contracts/markets/storefronts/AnzaDebtStorefront.sol#179-219):
	External calls:
	- _transferDebt(_collateralAddress,_collateralId,_price,_seller) (contracts/markets/storefronts/AnzaDebtStorefront.sol#210)
		- (_success,_data) = loanTreasurerAddress.call{value: _price}(abi.encodeWithSignature(executeDebtPurchase(address,uint256,address,address),_collateralAddress,_collateralId,_seller,msg.sender)) (contracts/markets/storefronts/AnzaDebtStorefront.sol#296-306)
	Event emitted after the call(s):
	- ListingPurchased(msg.sender,uint8(ListingType.DEBT),_collateralAddress,_collateralId) (contracts/markets/storefronts/AnzaDebtStorefront.sol#213-218)
Reentrancy in AnzaDebtStorefront._buyListing(address,uint256,uint256,uint256,uint256,bytes) (contracts/markets/storefronts/AnzaDebtStorefront.sol#235-276):
	External calls:
	- _transferDebt(_collateralAddress,_collateralId,_price,_seller) (contracts/markets/storefronts/AnzaDebtStorefront.sol#267)
		- (_success,_data) = loanTreasurerAddress.call{value: _price}(abi.encodeWithSignature(executeDebtPurchase(address,uint256,address,address),_collateralAddress,_collateralId,_seller,msg.sender)) (contracts/markets/storefronts/AnzaDebtStorefront.sol#296-306)
	Event emitted after the call(s):
	- ListingPurchased(msg.sender,uint8(ListingType.DEBT),_collateralAddress,_collateralId) (contracts/markets/storefronts/AnzaDebtStorefront.sol#270-275)
Reentrancy in AnzaRefinanceStorefront._buyListing(uint256,uint256,uint256,bytes32,bytes) (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#188-222):
	External calls:
	- _transferRefinance(_debtId,_price,_seller,_contractTerms) (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#213)
		- (_success,_data) = loanTreasurerAddress.call{value: _price}(abi.encodeWithSignature(executeRefinancePurchase(uint256,address,address,bytes32),_debtId,_seller,msg.sender,_contractTerms)) (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#292-302)
	Event emitted after the call(s):
	- ListingPurchased(msg.sender,uint8(ListingType.REFINANCE),address(_anzaTokenCatalog),_debtId.debtIdToBorrowerTokenId()) (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#216-221)
Reentrancy in AnzaRefinanceStorefront._buyListing(uint256,uint256,uint256,uint256,bytes32,bytes) (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#238-271):
	External calls:
	- _transferRefinance(_debtId,_price,_seller,_contractTerms) (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#262)
		- (_success,_data) = loanTreasurerAddress.call{value: _price}(abi.encodeWithSignature(executeRefinancePurchase(uint256,address,address,bytes32),_debtId,_seller,msg.sender,_contractTerms)) (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#292-302)
	Event emitted after the call(s):
	- ListingPurchased(msg.sender,uint8(ListingType.REFINANCE),address(_anzaTokenCatalog),_debtId.debtIdToBorrowerTokenId()) (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#265-270)
Reentrancy in AnzaSponsorshipStorefront._buyListing(uint256,uint256,uint256,bytes) (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#179-212):
	External calls:
	- _transferSponsorship(_debtId,_price,_seller) (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#203)
		- (_success,_data) = loanTreasurerAddress.call{value: _price}(abi.encodeWithSignature(executeSponsorshipPurchase(uint256,address),_debtId,msg.sender)) (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#278-286)
	Event emitted after the call(s):
	- ListingPurchased(msg.sender,uint8(ListingType.SPONSORSHIP),address(_anzaTokenCatalog),_debtId.debtIdToLenderTokenId()) (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#206-211)
Reentrancy in AnzaSponsorshipStorefront._buyListing(uint256,uint256,uint256,uint256,bytes) (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#227-259):
	External calls:
	- _transferSponsorship(_debtId,_price,_seller) (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#250)
		- (_success,_data) = loanTreasurerAddress.call{value: _price}(abi.encodeWithSignature(executeSponsorshipPurchase(uint256,address),_debtId,msg.sender)) (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#278-286)
	Event emitted after the call(s):
	- ListingPurchased(msg.sender,uint8(ListingType.SPONSORSHIP),address(_anzaTokenCatalog),_debtId.debtIdToLenderTokenId()) (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#253-258)
Reentrancy in PaymentBook._depositPayment(address,uint256,uint256) (contracts/databases/lending-databases/PaymentBook.sol#157-191):
	External calls:
	- _anzaToken.burnLenderToken(_debtId,_payment) (contracts/databases/lending-databases/PaymentBook.sol#177)
	Event emitted after the call(s):
	- Deposited(_debtId,_payer,_lender,_payment) (contracts/databases/lending-databases/PaymentBook.sol#179)
Reentrancy in PaymentBook._depositPayment(address,uint256,uint256) (contracts/databases/lending-databases/PaymentBook.sol#157-191):
	External calls:
	- _anzaToken.burnLenderToken(_debtId,_balance) (contracts/databases/lending-databases/PaymentBook.sol#185)
	Event emitted after the call(s):
	- Deposited(_debtId,_payer,_lender,_balance) (contracts/databases/lending-databases/PaymentBook.sol#187)
Reentrancy in AnzaToken._mint(address,uint256,uint256,bytes) (contracts/tokens/AnzaToken.sol#172-180):
	External calls:
	- super._mint(_to,_id,_amount,_data) (contracts/tokens/AnzaToken.sol#178)
		- IERC1155Receiver(to).onERC1155Received(operator,from,id,amount,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#476-484)
	Event emitted after the call(s):
	- URI(uri(tokenId),tokenId) (contracts/tokens/AnzaTokenURIStorage.sol#65)
		- _setURI(_id,string(_data)) (contracts/tokens/AnzaToken.sol#179)
Reentrancy in TimelockController.execute(address,uint256,bytes,bytes32,bytes32) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#295-308):
	External calls:
	- _execute(target,value,payload) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#305)
		- (success) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#353)
	Event emitted after the call(s):
	- CallExecuted(id,0,target,value,payload) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#306)
Reentrancy in TimelockController.executeBatch(address[],uint256[],bytes[],bytes32,bytes32) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#322-343):
	External calls:
	- _execute(target,value,payload) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#339)
		- (success) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#353)
	Event emitted after the call(s):
	- CallExecuted(id,i,target,value,payload) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#340)
Reentrancy in LoanContract.initContract(address,uint256,bytes32,bytes) (contracts/LoanContract.sol#65-140):
	External calls:
	- _collateralToken.safeTransferFrom(_borrower,address(_collateralVault),_collateralId,abi.encodePacked(_totalDebts)) (contracts/LoanContract.sol#102-107)
	- (_success) = _loanTreasurerAddress.call{value: msg.value}(abi.encodeWithSignature(depositFunds(uint256,address,address),_totalDebts,msg.sender,_borrower)) (contracts/LoanContract.sol#110-117)
	- _anzaToken.mintPair(msg.sender,_borrower,_totalDebts,msg.value,_collateralURI) (contracts/LoanContract.sol#125-131)
	External calls sending eth:
	- (_success) = _loanTreasurerAddress.call{value: msg.value}(abi.encodeWithSignature(depositFunds(uint256,address,address),_totalDebts,msg.sender,_borrower)) (contracts/LoanContract.sol#110-117)
	Event emitted after the call(s):
	- ContractInitialized(_collateralAddress,_collateralId,_totalDebts,1) (contracts/LoanContract.sol#134-139)
Reentrancy in LoanContract.initContract(uint256,address,address,bytes32) (contracts/LoanContract.sol#184-259):
	External calls:
	- _collateralVault.setCollateral(_borrower,_collateral.collateralAddress,_collateral.collateralId,_totalDebts,_debtMapLength) (contracts/LoanContract.sol#218-224)
	- (_success) = _loanTreasurerAddress.call{value: msg.value}(abi.encodeWithSignature(sponsorPayment(address,uint256),_lender,_debtId)) (contracts/LoanContract.sol#228-234)
	- _anzaToken.mintPair(_lender,_borrower,_totalDebts,msg.value,_collateralURI) (contracts/LoanContract.sol#244-250)
	External calls sending eth:
	- (_success) = _loanTreasurerAddress.call{value: msg.value}(abi.encodeWithSignature(sponsorPayment(address,uint256),_lender,_debtId)) (contracts/LoanContract.sol#228-234)
	Event emitted after the call(s):
	- ContractInitialized(_collateral.collateralAddress,_collateral.collateralId,_totalDebts,_debtMapLength) (contracts/LoanContract.sol#253-258)
Reentrancy in LoanContract.initContract(uint256,address,address) (contracts/LoanContract.sol#288-357):
	External calls:
	- _collateralVault.setCollateral(_borrower,_collateral.collateralAddress,_collateral.collateralId,_totalDebts,_debtMapLength) (contracts/LoanContract.sol#311-317)
	- _balance = lenderDebtBalance(_debtId) (contracts/LoanContract.sol#322)
		- _anzaToken.balanceOf(_anzaToken.lenderOf(_debtId),_debtId.debtIdToLenderTokenId()) (contracts/databases/lending-databases/DebtBook.sol#71-75)
	- (_success) = _loanTreasurerAddress.call{value: msg.value}(abi.encodeWithSignature(sponsorPayment(address,uint256),_lender,_debtId)) (contracts/LoanContract.sol#326-332)
	- _anzaToken.mintPair(_lender,_borrower,_totalDebts,_balance,_collateralURI) (contracts/LoanContract.sol#342-348)
	- _anzaToken.mintPair(_lender,_borrower,_totalDebts,msg.value,_collateralURI) (contracts/LoanContract.sol#342-348)
	External calls sending eth:
	- (_success) = _loanTreasurerAddress.call{value: msg.value}(abi.encodeWithSignature(sponsorPayment(address,uint256),_lender,_debtId)) (contracts/LoanContract.sol#326-332)
	Event emitted after the call(s):
	- ContractInitialized(_collateral.collateralAddress,_collateral.collateralId,_totalDebts,_debtMapLength) (contracts/LoanContract.sol#351-356)
Reentrancy in AnzaToken.mintPair(address,address,uint256,uint256,bytes) (contracts/tokens/AnzaToken.sol#100-112):
	External calls:
	- _mint(_lender,_debtId.debtIdToLenderTokenId(),_amount) (contracts/tokens/AnzaToken.sol#108)
		- IERC1155Receiver(to).onERC1155Received(operator,from,id,amount,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#476-484)
	- _mint(_borrower,_debtId.debtIdToBorrowerTokenId(),1,_collateralURI) (contracts/tokens/AnzaToken.sol#111)
		- IERC1155Receiver(to).onERC1155Received(operator,from,id,amount,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#476-484)
	Event emitted after the call(s):
	- TransferSingle(operator,address(0),to,id,amount) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#281)
		- _mint(_borrower,_debtId.debtIdToBorrowerTokenId(),1,_collateralURI) (contracts/tokens/AnzaToken.sol#111)
	- URI(uri(tokenId),tokenId) (contracts/tokens/AnzaTokenURIStorage.sol#65)
		- _mint(_borrower,_debtId.debtIdToBorrowerTokenId(),1,_collateralURI) (contracts/tokens/AnzaToken.sol#111)
Reentrancy in GovernorTimelockControl.queue(address[],uint256[],bytes[],bytes32) (node_modules/@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol#90-107):
	External calls:
	- _timelock.scheduleBatch(targets,values,calldatas,0,descriptionHash,delay) (node_modules/@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol#102)
	Event emitted after the call(s):
	- ProposalQueued(proposalId,block.timestamp + delay) (node_modules/@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol#104)
Reentrancy in LoanManager.updateLoanState(uint256) (contracts/services/LoanManager.sol#101-149):
	External calls:
	- checkLoanExpired(_debtId) (contracts/services/LoanManager.sol#116)
		- _anzaToken.totalSupply(_debtId.debtIdToLenderTokenId()) (contracts/databases/lending-databases/DebtBook.sol#60)
	Event emitted after the call(s):
	- LoanStateChanged(_debtId,_newLoanState,_oldLoanState) (contracts/services/LoanCodec.sol#457)
		- _updateLoanState(_debtId,_DEFAULT_STATE_) (contracts/services/LoanManager.sol#119)
Reentrancy in LoanManager.updateLoanState(uint256) (contracts/services/LoanManager.sol#101-149):
	External calls:
	- debtBalance(_debtId) <= 0 (contracts/services/LoanManager.sol#123)
		- _anzaToken.totalSupply(_debtId.debtIdToLenderTokenId()) (contracts/databases/lending-databases/DebtBook.sol#60)
	Event emitted after the call(s):
	- LoanStateChanged(_debtId,_newLoanState,_oldLoanState) (contracts/services/LoanCodec.sol#457)
		- _updateLoanState(_debtId,_PAID_STATE_) (contracts/services/LoanManager.sol#125)
Reentrancy in CollateralVault.withdraw(address,uint256) (contracts/services/CollateralVault.sol#157-184):
	External calls:
	- IERC721(_collateral.collateralAddress).safeTransferFrom(address(this),_to,_collateral.collateralId,) (contracts/services/CollateralVault.sol#170-175)
	Event emitted after the call(s):
	- WithdrawnCollateral(_to,_collateral.collateralAddress,_collateral.collateralId) (contracts/services/CollateralVault.sol#177-181)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
DebtTermIndexer._checkCommitted(DebtTermIndexer.DebtTermMap,uint256) (contracts/libraries/lending-libraries/DebtTermIndexer.sol#386-391) uses timestamp for comparisons
	Dangerous comparisons:
	- _loanCommital(_map,_debtId) > block.timestamp (contracts/libraries/lending-libraries/DebtTermIndexer.sol#390)
LoanAccountant.__updateDebtWithInterest(uint256,uint256) (contracts/services/LoanAccountant.sol#176-203) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp <= _loanLastChecked (contracts/services/LoanAccountant.sol#180)
	- _firIntervals > 0 && _fixedInterestRate > 0 (contracts/services/LoanAccountant.sol#190)
	- _newDebt > 0 (contracts/services/LoanAccountant.sol#201)
LoanCodec._validateLoanTerms(bytes32,uint64,uint256) (contracts/services/LoanCodec.sol#85-183) uses timestamp for comparisons
	Dangerous comparisons:
	- _loanStart + _duration + _gracePeriod__validateLoanTerms_asm_0 > _UINT64_MAX_ (contracts/services/LoanCodec.sol#144-146)
LoanManager.checkLoanExpired(uint256) (contracts/services/LoanManager.sol#189-192) uses timestamp for comparisons
	Dangerous comparisons:
	- debtBalance(_debtId) > 0 && loanClose(_debtId) <= block.timestamp (contracts/services/LoanManager.sol#190-191)
LoanManager._checkLoanGracePeriod(uint256) (contracts/services/LoanManager.sol#194-198) uses timestamp for comparisons
	Dangerous comparisons:
	- loanStart(_debtId) > block.timestamp (contracts/services/LoanManager.sol#197)
TimelockController.isOperation(bytes32) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#140-142) uses timestamp for comparisons
	Dangerous comparisons:
	- getTimestamp(id) > 0 (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#141)
TimelockController.isOperationPending(bytes32) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#147-149) uses timestamp for comparisons
	Dangerous comparisons:
	- getTimestamp(id) > _DONE_TIMESTAMP (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#148)
TimelockController.isOperationReady(bytes32) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#154-157) uses timestamp for comparisons
	Dangerous comparisons:
	- timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#156)
TimelockController.isOperationDone(bytes32) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#162-164) uses timestamp for comparisons
	Dangerous comparisons:
	- getTimestamp(id) == _DONE_TIMESTAMP (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#163)
TimelockController._beforeCall(bytes32,bytes32) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#360-363) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(predecessor == bytes32(0) || isOperationDone(predecessor),TimelockController: missing dependency) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#362)
ERC20Votes.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol#146-163) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp <= expiry,ERC20Votes: signature expired) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol#154)
ERC20Permit.permit(address,address,uint256,uint256,uint8,bytes32,bytes32) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#49-68) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp <= deadline,ERC20Permit: expired deadline) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#58)
Timers.isPending(Timers.Timestamp) (node_modules/@openzeppelin/contracts/utils/Timers.sol#34-36) uses timestamp for comparisons
	Dangerous comparisons:
	- timer._deadline > block.timestamp (node_modules/@openzeppelin/contracts/utils/Timers.sol#35)
Timers.isExpired(Timers.Timestamp) (node_modules/@openzeppelin/contracts/utils/Timers.sol#38-40) uses timestamp for comparisons
	Dangerous comparisons:
	- isStarted(timer) && timer._deadline <= block.timestamp (node_modules/@openzeppelin/contracts/utils/Timers.sol#39)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
Void constructor called in DebtBook.constructor() (contracts/databases/lending-databases/DebtBook.sol#28):
	- DebtBookAccessController() (contracts/databases/lending-databases/DebtBook.sol#28)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#void-constructor
INFO:Detectors:
LoanContract._validateLoanTerms.asm_0.__revert() (contracts/services/LoanCodec.sol#98-102) uses assembly
	- INLINE ASM (contracts/services/LoanCodec.sol#98-102)
LoanContract._setLoanAgreement.asm_0.__packTerm() (contracts/services/LoanCodec.sol#405-410) uses assembly
	- INLINE ASM (contracts/services/LoanCodec.sol#405-410)
LoanContract._updateLoanTimes.asm_0.__packTerm() (contracts/services/LoanCodec.sol#474-479) uses assembly
	- INLINE ASM (contracts/services/LoanCodec.sol#474-479)
AnzaBaseMarketParticipant._revert(bytes) (contracts/databases/market-databases/AnzaBaseMarketParticipant.sol#38-46) uses assembly
	- INLINE ASM (contracts/databases/market-databases/AnzaBaseMarketParticipant.sol#42-45)
TypeUtils.toUint64(uint256) (contracts/libraries/TypeUtils.sol#21-30) uses assembly
	- INLINE ASM (contracts/libraries/TypeUtils.sol#22-29)
TypeUtils.toUint32(uint256) (contracts/libraries/TypeUtils.sol#42-51) uses assembly
	- INLINE ASM (contracts/libraries/TypeUtils.sol#43-50)
TypeUtils.verifyUint32(uint256) (contracts/libraries/TypeUtils.sol#60-67) uses assembly
	- INLINE ASM (contracts/libraries/TypeUtils.sol#61-66)
AnzaNotary.createContractTerms(uint8,uint8,uint8,uint8,uint32,uint32,uint32,uint8) (contracts/libraries/lending-libraries/AnzaNotary.sol#35-64) uses assembly
	- INLINE ASM (contracts/libraries/lending-libraries/AnzaNotary.sol#45-63)
AnzaNotary.splitSignature(bytes) (contracts/libraries/lending-libraries/AnzaNotary.sol#290-301) uses assembly
	- INLINE ASM (contracts/libraries/lending-libraries/AnzaNotary.sol#296-300)
DebtTermIndexer._loanState(DebtTermIndexer.DebtTermMap,uint256) (contracts/libraries/lending-libraries/DebtTermIndexer.sol#109-118) uses assembly
	- INLINE ASM (contracts/libraries/lending-libraries/DebtTermIndexer.sol#115-117)
DebtTermIndexer._firInterval(DebtTermIndexer.DebtTermMap,uint256) (contracts/libraries/lending-libraries/DebtTermIndexer.sol#131-143) uses assembly
	- INLINE ASM (contracts/libraries/lending-libraries/DebtTermIndexer.sol#137-142)
DebtTermIndexer._fixedInterestRate(DebtTermIndexer.DebtTermMap,uint256) (contracts/libraries/lending-libraries/DebtTermIndexer.sol#156-168) uses assembly
	- INLINE ASM (contracts/libraries/lending-libraries/DebtTermIndexer.sol#162-167)
DebtTermIndexer._isFixed(DebtTermIndexer.DebtTermMap,uint256) (contracts/libraries/lending-libraries/DebtTermIndexer.sol#181-193) uses assembly
	- INLINE ASM (contracts/libraries/lending-libraries/DebtTermIndexer.sol#187-192)
DebtTermIndexer._loanStart(DebtTermIndexer.DebtTermMap,uint256) (contracts/libraries/lending-libraries/DebtTermIndexer.sol#221-233) uses assembly
	- INLINE ASM (contracts/libraries/lending-libraries/DebtTermIndexer.sol#227-232)
DebtTermIndexer._loanDuration(DebtTermIndexer.DebtTermMap,uint256) (contracts/libraries/lending-libraries/DebtTermIndexer.sol#246-258) uses assembly
	- INLINE ASM (contracts/libraries/lending-libraries/DebtTermIndexer.sol#252-257)
DebtTermIndexer._loanCommital(DebtTermIndexer.DebtTermMap,uint256) (contracts/libraries/lending-libraries/DebtTermIndexer.sol#274-289) uses assembly
	- INLINE ASM (contracts/libraries/lending-libraries/DebtTermIndexer.sol#280-288)
DebtTermIndexer._loanClose(DebtTermIndexer.DebtTermMap,uint256) (contracts/libraries/lending-libraries/DebtTermIndexer.sol#302-317) uses assembly
	- INLINE ASM (contracts/libraries/lending-libraries/DebtTermIndexer.sol#308-316)
DebtTermIndexer._lenderRoyalties(DebtTermIndexer.DebtTermMap,uint256) (contracts/libraries/lending-libraries/DebtTermIndexer.sol#336-348) uses assembly
	- INLINE ASM (contracts/libraries/lending-libraries/DebtTermIndexer.sol#342-347)
DebtTermIndexer._activeLoanCount(DebtTermIndexer.DebtTermMap,uint256) (contracts/libraries/lending-libraries/DebtTermIndexer.sol#364-376) uses assembly
	- INLINE ASM (contracts/libraries/lending-libraries/DebtTermIndexer.sol#370-375)
DebtTermIndexer.__verifyUnlocked(bytes32) (contracts/libraries/lending-libraries/DebtTermIndexer.sol#399-406) uses assembly
	- INLINE ASM (contracts/libraries/lending-libraries/DebtTermIndexer.sol#400-405)
AnzaTokenIndexer.debtIdToBorrowerTokenId(uint256) (contracts/libraries/tokens-libraries/AnzaTokenIndexer.sol#14-25) uses assembly
	- INLINE ASM (contracts/libraries/tokens-libraries/AnzaTokenIndexer.sol#17-24)
AnzaTokenIndexer.debtIdToLenderTokenId(uint256) (contracts/libraries/tokens-libraries/AnzaTokenIndexer.sol#27-38) uses assembly
	- INLINE ASM (contracts/libraries/tokens-libraries/AnzaTokenIndexer.sol#30-37)
LoanCodec._validateLoanTerms(bytes32,uint64,uint256) (contracts/services/LoanCodec.sol#85-183) uses assembly
	- INLINE ASM (contracts/services/LoanCodec.sol#97-169)
LoanCodec._getTotalFirIntervals(uint256,uint256) (contracts/services/LoanCodec.sol#199-252) uses assembly
	- INLINE ASM (contracts/services/LoanCodec.sol#203-251)
LoanCodec._setLoanAgreement(uint64,uint256,uint256,bytes32) (contracts/services/LoanCodec.sol#273-395) uses assembly
	- INLINE ASM (contracts/services/LoanCodec.sol#281-392)
LoanCodec._setLoanAgreement(uint256,uint256,bytes32) (contracts/services/LoanCodec.sol#397-426) uses assembly
	- INLINE ASM (contracts/services/LoanCodec.sol#404-423)
LoanCodec._updateLoanState(uint256,uint8) (contracts/services/LoanCodec.sol#428-458) uses assembly
	- INLINE ASM (contracts/services/LoanCodec.sol#432-453)
LoanCodec._updateLoanTimes(uint256) (contracts/services/LoanCodec.sol#469-567) uses assembly
	- INLINE ASM (contracts/services/LoanCodec.sol#473-561)
LoanCodec._validateLoanTerms.asm_0.__revert() (contracts/services/LoanCodec.sol#98-102) uses assembly
	- INLINE ASM (contracts/services/LoanCodec.sol#98-102)
LoanCodec._setLoanAgreement.asm_0.__packTerm() (contracts/services/LoanCodec.sol#405-410) uses assembly
	- INLINE ASM (contracts/services/LoanCodec.sol#405-410)
LoanCodec._updateLoanTimes.asm_0.__packTerm() (contracts/services/LoanCodec.sol#474-479) uses assembly
	- INLINE ASM (contracts/services/LoanCodec.sol#474-479)
LoanManager._validateLoanTerms.asm_0.__revert() (contracts/services/LoanCodec.sol#98-102) uses assembly
	- INLINE ASM (contracts/services/LoanCodec.sol#98-102)
LoanManager._setLoanAgreement.asm_0.__packTerm() (contracts/services/LoanCodec.sol#405-410) uses assembly
	- INLINE ASM (contracts/services/LoanCodec.sol#405-410)
LoanManager._updateLoanTimes.asm_0.__packTerm() (contracts/services/LoanCodec.sol#474-479) uses assembly
	- INLINE ASM (contracts/services/LoanCodec.sol#474-479)
console._sendLogPayload(bytes) (lib/forge-std/src/console.sol#7-15) uses assembly
	- INLINE ASM (lib/forge-std/src/console.sol#11-14)
ERC20Votes._unsafeAccess(ERC20Votes.Checkpoint[],uint256) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol#269-274) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol#270-273)
Address._revert(bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#231-243) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#236-239)
Checkpoints._unsafeAccess(Checkpoints.Checkpoint[],uint256) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#212-217) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#213-216)
Checkpoints._unsafeAccess(Checkpoints.Checkpoint224[],uint256) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#376-385) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#381-384)
Checkpoints._unsafeAccess(Checkpoints.Checkpoint160[],uint256) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#544-553) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#549-552)
Strings.toString(uint256) (node_modules/@openzeppelin/contracts/utils/Strings.sol#18-38) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Strings.sol#24-26)
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Strings.sol#30-32)
ECDSA.tryRecover(bytes32,bytes) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#55-72) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#63-67)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#66-70)
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#86-93)
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#100-109)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
AnzaNotary.createContractTerms(uint8,uint8,uint8,uint8,uint32,uint32,uint32,uint8) (contracts/libraries/lending-libraries/AnzaNotary.sol#35-64) compares to a boolean constant:
	-switch_expr_1539_193_59_createContractTerms_asm_0 == false (contracts/libraries/lending-libraries/AnzaNotary.sol#53-55)
AnzaNotary.createContractTerms(uint8,uint8,uint8,uint8,uint32,uint32,uint32,uint8) (contracts/libraries/lending-libraries/AnzaNotary.sol#35-64) compares to a boolean constant:
	-switch_expr_1539_193_59_createContractTerms_asm_0 == true (contracts/libraries/lending-libraries/AnzaNotary.sol#50-52)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['0.8.20', '>=0.4.22<0.9.0', '^0.8.0', '^0.8.1', '^0.8.4', '^0.8.9']
	- 0.8.20 (contracts/LoanContract.sol#2)
	- 0.8.20 (contracts/access/lending-access/AccountantAccessController.sol#2)
	- 0.8.20 (contracts/access/lending-access/DebtBookAccessController.sol#2)
	- 0.8.20 (contracts/access/lending-access/ManagerAccessController.sol#2)
	- 0.8.20 (contracts/access/lending-access/PaymentBookAccessController.sol#2)
	- 0.8.20 (contracts/access/lending-access/VaultAccessController.sol#2)
	- 0.8.20 (contracts/access/lending-access/interfaces/IAccountantAccessController.sol#2)
	- 0.8.20 (contracts/access/lending-access/interfaces/IDebtBookAccessController.sol#2)
	- 0.8.20 (contracts/access/lending-access/interfaces/IManagerAccessController.sol#2)
	- 0.8.20 (contracts/access/lending-access/interfaces/IPaymentBookAccessController.sol#2)
	- 0.8.20 (contracts/access/lending-access/interfaces/IVaultAccessController.sol#2)
	- 0.8.20 (contracts/access/market-access/AnzaDebtMarketAccessController.sol#2)
	- 0.8.20 (contracts/access/market-access/AnzaDebtStorefrontAccessController.sol#2)
	- 0.8.20 (contracts/access/market-access/AnzaRefinanceStorefrontAccessController.sol#2)
	- 0.8.20 (contracts/access/market-access/AnzaSponsorshipStorefrontAccessController.sol#2)
	- 0.8.20 (contracts/access/market-access/interfaces/IAnzaDebtMarketAccessController.sol#2)
	- 0.8.20 (contracts/access/market-access/interfaces/IAnzaDebtStorefrontAccessController.sol#2)
	- 0.8.20 (contracts/access/market-access/interfaces/IAnzaRefinanceStorefrontAccessController.sol#2)
	- 0.8.20 (contracts/access/market-access/interfaces/IAnzaSponsorshipStorefrontAccessController.sol#2)
	- 0.8.20 (contracts/access/token-access/AnzaTokenAccessController.sol#2)
	- 0.8.20 (contracts/access/token-access/interfaces/IAnzaTokenAccessController.sol#2)
	- 0.8.20 (contracts/dao/TimeLock.sol#2)
	- 0.8.20 (contracts/dao/governance/AnzaGovernance.sol#2)
	- 0.8.20 (contracts/databases/globals/custom-errors/StdAccessErrors.sol#2)
	- 0.8.20 (contracts/databases/globals/custom-errors/StdAnzaMarketErrors.sol#2)
	- 0.8.20 (contracts/databases/globals/custom-errors/StdAnzaTokenErrors.sol#2)
	- 0.8.20 (contracts/databases/globals/custom-errors/StdBaseMarketErrors.sol#2)
	- 0.8.20 (contracts/databases/globals/custom-errors/StdCodecErrors.sol#2)
	- 0.8.20 (contracts/databases/globals/custom-errors/StdLoanErrors.sol#2)
	- 0.8.20 (contracts/databases/globals/custom-errors/StdManagerErrors.sol#2)
	- 0.8.20 (contracts/databases/globals/custom-errors/StdMonetaryErrors.sol#2)
	- 0.8.20 (contracts/databases/globals/custom-errors/StdNotaryErrors.sol#2)
	- 0.8.20 (contracts/databases/globals/custom-errors/StdTreasureyErrors.sol#2)
	- 0.8.20 (contracts/databases/globals/custom-errors/StdVaultErrors.sol#2)
	- 0.8.20 (contracts/databases/lending-databases/DebtBook.sol#2)
	- 0.8.20 (contracts/databases/lending-databases/DebtTerms.sol#2)
	- 0.8.20 (contracts/databases/lending-databases/PaymentBook.sol#2)
	- 0.8.20 (contracts/databases/lending-databases/interfaces/IDebtBook.sol#2)
	- 0.8.20 (contracts/databases/lending-databases/interfaces/IPaymentBook.sol#2)
	- 0.8.20 (contracts/databases/market-databases/AnzaBaseMarketParticipant.sol#2)
	- 0.8.20 (contracts/databases/market-databases/interfaces/IAnzaBaseMarketParticipant.sol#2)
	- 0.8.20 (contracts/interfaces/ILoanContract.sol#2)
	- 0.8.20 (contracts/libraries/NonceLocker.sol#2)
	- 0.8.20 (contracts/libraries/TypeUtils.sol#2)
	- 0.8.20 (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#2)
	- 0.8.20 (contracts/libraries/lending-libraries/AnzaNotary.sol#2)
	- 0.8.20 (contracts/libraries/lending-libraries/DebtTermIndexer.sol#2)
	- 0.8.20 (contracts/libraries/lending-libraries/InterestCalculator.sol#2)
	- 0.8.20 (contracts/libraries/tokens-libraries/AnzaTokenIndexer.sol#2)
	- 0.8.20 (contracts/markets/AnzaDebtExchange.sol#2)
	- 0.8.20 (contracts/markets/AnzaDebtMarket.sol#2)
	- 0.8.20 (contracts/markets/interfaces/IAnzaDebtExchange.sol#2)
	- 0.8.20 (contracts/markets/interfaces/IAnzaDebtMarket.sol#2)
	- 0.8.20 (contracts/markets/storefronts/AnzaDebtStorefront.sol#2)
	- 0.8.20 (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#2)
	- 0.8.20 (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#2)
	- 0.8.20 (contracts/markets/storefronts/interfaces/IAnzaDebtStorefront.sol#2)
	- 0.8.20 (contracts/markets/storefronts/interfaces/IAnzaRefinanceStorefront.sol#2)
	- 0.8.20 (contracts/markets/storefronts/interfaces/IAnzaSponsorshipStorefront.sol#2)
	- 0.8.20 (contracts/services/CollateralVault.sol#2)
	- 0.8.20 (contracts/services/LoanAccountant.sol#2)
	- 0.8.20 (contracts/services/LoanCodec.sol#2)
	- 0.8.20 (contracts/services/LoanManager.sol#2)
	- 0.8.20 (contracts/services/LoanNotary.sol#2)
	- 0.8.20 (contracts/services/LoanTreasurey.sol#2)
	- 0.8.20 (contracts/services/interfaces/ICollateralVault.sol#3)
	- 0.8.20 (contracts/services/interfaces/ILoanAccountantExchange.sol#2)
	- 0.8.20 (contracts/services/interfaces/ILoanCodec.sol#2)
	- 0.8.20 (contracts/services/interfaces/ILoanManager.sol#2)
	- 0.8.20 (contracts/services/interfaces/ILoanNotary.sol#2)
	- 0.8.20 (contracts/services/interfaces/ILoanTreasurey.sol#2)
	- 0.8.20 (contracts/tokens/AnzaBaseToken.sol#2)
	- 0.8.20 (contracts/tokens/AnzaGovernanceToken.sol#2)
	- 0.8.20 (contracts/tokens/AnzaToken.sol#2)
	- 0.8.20 (contracts/tokens/AnzaTokenCatalog.sol#2)
	- 0.8.20 (contracts/tokens/AnzaTokenURIStorage.sol#2)
	- 0.8.20 (contracts/tokens/interfaces/IAnzaBase.sol#2)
	- 0.8.20 (contracts/tokens/interfaces/IAnzaToken.sol#2)
	- 0.8.20 (contracts/tokens/interfaces/IAnzaTokenCatalog.sol#2)
	- 0.8.20 (contracts/databases/globals/lending-constants/LoanContractFIRIntervals.sol#2)
	- 0.8.20 (contracts/databases/globals/lending-constants/LoanContractNumbers.sol#2)
	- 0.8.20 (contracts/databases/globals/lending-constants/LoanContractRoles.sol#2)
	- 0.8.20 (contracts/databases/globals/lending-constants/LoanContractStates.sol#2)
	- 0.8.20 (contracts/databases/globals/lending-constants/LoanContractTermMaps.sol#2)
	- 0.8.20 (contracts/databases/globals/lending-constants/LoanNotaryTypeHashes.sol#2)
	- 0.8.20 (contracts/databases/globals/market-constants/AnzaDebtMarketRoles.sol#2)
	- 0.8.20 (contracts/databases/globals/market-constants/AnzaDebtStorefrontSelectors.sol#2)
	- 0.8.20 (contracts/databases/globals/token-constants/AnzaTokenTransferTypes.sol#2)
	- 0.8.20 (contracts/databases/globals/universal-numbers/StdNumbers.sol#2)
	- >=0.4.22<0.9.0 (lib/forge-std/src/console.sol#2)
	- ^0.8.0 (contracts/databases/lending-databases/interfaces/IDebtTerms.sol#2)
	- ^0.8.0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#6)
	- ^0.8.0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#6)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/access/IAccessControl.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/governance/Governor.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/governance/IGovernor.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/governance/extensions/GovernorSettings.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/governance/extensions/GovernorVotes.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/governance/utils/IVotes.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#5)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Counters.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Timers.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#5)
	- ^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)
	- ^0.8.4 (node_modules/@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol#3)
	- ^0.8.9 (contracts/libraries/BlockTime.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
ABDKMath64x64.pow(int128,uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#378-470) has a high cyclomatic complexity (19).
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) has a high cyclomatic complexity (65).
ABDKMathQuad.add(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#516-619) has a high cyclomatic complexity (17).
ABDKMathQuad.mul(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#660-725) has a high cyclomatic complexity (12).
ABDKMathQuad.div(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#761-833) has a high cyclomatic complexity (13).
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) has a high cyclomatic complexity (133).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity
INFO:Detectors:
ABDKMath64x64.abs(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#314-319) is never used and should be removed
ABDKMath64x64.avg(int128,int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#344-348) is never used and should be removed
ABDKMath64x64.div(int128,int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#237-244) is never used and should be removed
ABDKMath64x64.divi(int256,int256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#254-276) is never used and should be removed
ABDKMath64x64.exp(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#712-725) is never used and should be removed
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) is never used and should be removed
ABDKMath64x64.from128x128(int256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#89-95) is never used and should be removed
ABDKMath64x64.fromInt(int256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#34-39) is never used and should be removed
ABDKMath64x64.gavg(int128,int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#358-368) is never used and should be removed
ABDKMath64x64.inv(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#328-335) is never used and should be removed
ABDKMath64x64.ln(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#542-554) is never used and should be removed
ABDKMath64x64.log_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#491-534) is never used and should be removed
ABDKMath64x64.muli(int128,int256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#163-197) is never used and should be removed
ABDKMath64x64.neg(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#301-306) is never used and should be removed
ABDKMath64x64.sqrt(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#478-483) is never used and should be removed
ABDKMath64x64.sqrtu(uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#798-842) is never used and should be removed
ABDKMath64x64.sub(int128,int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#132-138) is never used and should be removed
ABDKMath64x64.to128x128(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#104-108) is never used and should be removed
ABDKMath64x64.toInt(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#48-52) is never used and should be removed
ABDKMath64x64.toUInt(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#75-80) is never used and should be removed
ABDKMathQuad.abs(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#853-857) is never used and should be removed
ABDKMathQuad.add(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#516-619) is never used and should be removed
ABDKMathQuad.cmp(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#456-483) is never used and should be removed
ABDKMathQuad.div(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#761-833) is never used and should be removed
ABDKMathQuad.eq(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#493-500) is never used and should be removed
ABDKMathQuad.exp(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1184-1188) is never used and should be removed
ABDKMathQuad.from128x128(int256) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#153-170) is never used and should be removed
ABDKMathQuad.from64x64(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#209-226) is never used and should be removed
ABDKMathQuad.fromDouble(bytes8) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#333-357) is never used and should be removed
ABDKMathQuad.fromInt(int256) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#46-63) is never used and should be removed
ABDKMathQuad.fromOctuple(bytes32) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#264-293) is never used and should be removed
ABDKMathQuad.fromUInt(uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#101-116) is never used and should be removed
ABDKMathQuad.isInfinity(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#422-427) is never used and should be removed
ABDKMathQuad.isNaN(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#408-413) is never used and should be removed
ABDKMathQuad.ln(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#989-993) is never used and should be removed
ABDKMathQuad.log_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#924-981) is never used and should be removed
ABDKMathQuad.mostSignificantBit(uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1197-1214) is never used and should be removed
ABDKMathQuad.mul(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#660-725) is never used and should be removed
ABDKMathQuad.neg(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#841-845) is never used and should be removed
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) is never used and should be removed
ABDKMathQuad.sign(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#436-446) is never used and should be removed
ABDKMathQuad.sqrt(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#865-916) is never used and should be removed
ABDKMathQuad.sub(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#635-639) is never used and should be removed
ABDKMathQuad.to128x128(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#179-200) is never used and should be removed
ABDKMathQuad.to64x64(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#235-256) is never used and should be removed
ABDKMathQuad.toDouble(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#365-400) is never used and should be removed
ABDKMathQuad.toInt(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#72-93) is never used and should be removed
ABDKMathQuad.toOctuple(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#301-325) is never used and should be removed
ABDKMathQuad.toUInt(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#127-144) is never used and should be removed
Address.functionCall(address,bytes) (node_modules/@openzeppelin/contracts/utils/Address.sol#85-87) is never used and should be removed
Address.functionCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#95-101) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#114-120) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#128-137) is never used and should be removed
Address.functionDelegateCall(address,bytes) (node_modules/@openzeppelin/contracts/utils/Address.sol#170-172) is never used and should be removed
Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#180-187) is never used and should be removed
Address.functionStaticCall(address,bytes) (node_modules/@openzeppelin/contracts/utils/Address.sol#145-147) is never used and should be removed
Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#155-162) is never used and should be removed
Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#60-65) is never used and should be removed
Address.verifyCallResultFromTarget(address,bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#195-211) is never used and should be removed
AnzaGovernance._cancel(address[],uint256[],bytes[],bytes32) (contracts/dao/governance/AnzaGovernance.sol#102-109) is never used and should be removed
AnzaGovernanceToken._burn(address,uint256) (contracts/tokens/AnzaGovernanceToken.sol#28-33) is never used and should be removed
AnzaToken.__debtBatchTransferFrom(address,address,uint256[],uint256[],bytes) (contracts/tokens/AnzaToken.sol#262-271) is never used and should be removed
AnzaTokenCatalog._setTotalSupply(uint256,uint256) (contracts/tokens/AnzaTokenCatalog.sol#57-59) is never used and should be removed
AnzaTokenIndexer.tokenIdToDebtId(uint256) (contracts/libraries/tokens-libraries/AnzaTokenIndexer.sol#8-12) is never used and should be removed
Checkpoints._insert(Checkpoints.Checkpoint160[],uint96,uint160) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#468-493) is never used and should be removed
Checkpoints._insert(Checkpoints.Checkpoint224[],uint32,uint224) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#300-325) is never used and should be removed
Checkpoints._lowerBinaryLookup(Checkpoints.Checkpoint160[],uint96,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#524-539) is never used and should be removed
Checkpoints._lowerBinaryLookup(Checkpoints.Checkpoint224[],uint32,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#356-371) is never used and should be removed
Checkpoints._lowerBinaryLookup(Checkpoints.Checkpoint[],uint32,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#192-207) is never used and should be removed
Checkpoints._unsafeAccess(Checkpoints.Checkpoint160[],uint256) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#544-553) is never used and should be removed
Checkpoints._unsafeAccess(Checkpoints.Checkpoint224[],uint256) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#376-385) is never used and should be removed
Checkpoints._upperBinaryLookup(Checkpoints.Checkpoint160[],uint96,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#501-516) is never used and should be removed
Checkpoints._upperBinaryLookup(Checkpoints.Checkpoint224[],uint32,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#333-348) is never used and should be removed
Checkpoints.getAtProbablyRecentBlock(Checkpoints.History,uint256) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#49-70) is never used and should be removed
Checkpoints.latest(Checkpoints.Trace160) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#430-433) is never used and should be removed
Checkpoints.latest(Checkpoints.Trace224) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#262-265) is never used and should be removed
Checkpoints.latestCheckpoint(Checkpoints.History) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#107-123) is never used and should be removed
Checkpoints.latestCheckpoint(Checkpoints.Trace160) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#439-455) is never used and should be removed
Checkpoints.latestCheckpoint(Checkpoints.Trace224) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#271-287) is never used and should be removed
Checkpoints.length(Checkpoints.History) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#128-130) is never used and should be removed
Checkpoints.length(Checkpoints.Trace160) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#460-462) is never used and should be removed
Checkpoints.length(Checkpoints.Trace224) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#292-294) is never used and should be removed
Checkpoints.lowerLookup(Checkpoints.Trace160,uint96) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#412-416) is never used and should be removed
Checkpoints.lowerLookup(Checkpoints.Trace224,uint32) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#244-248) is never used and should be removed
Checkpoints.push(Checkpoints.History,function(uint256,uint256) returns(uint256),uint256) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#87-93) is never used and should be removed
Checkpoints.push(Checkpoints.Trace160,uint96,uint160) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#401-407) is never used and should be removed
Checkpoints.push(Checkpoints.Trace224,uint32,uint224) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#233-239) is never used and should be removed
Checkpoints.upperLookup(Checkpoints.Trace160,uint96) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#421-425) is never used and should be removed
Checkpoints.upperLookup(Checkpoints.Trace224,uint32) (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#253-257) is never used and should be removed
Counters.decrement(Counters.Counter) (node_modules/@openzeppelin/contracts/utils/Counters.sol#32-38) is never used and should be removed
Counters.reset(Counters.Counter) (node_modules/@openzeppelin/contracts/utils/Counters.sol#40-42) is never used and should be removed
DoubleEndedQueue.at(DoubleEndedQueue.Bytes32Deque,uint256) (node_modules/@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol#135-140) is never used and should be removed
DoubleEndedQueue.back(DoubleEndedQueue.Bytes32Deque) (node_modules/@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol#120-127) is never used and should be removed
DoubleEndedQueue.front(DoubleEndedQueue.Bytes32Deque) (node_modules/@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol#109-113) is never used and should be removed
DoubleEndedQueue.length(DoubleEndedQueue.Bytes32Deque) (node_modules/@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol#156-162) is never used and should be removed
DoubleEndedQueue.popBack(DoubleEndedQueue.Bytes32Deque) (node_modules/@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol#66-75) is never used and should be removed
DoubleEndedQueue.pushFront(DoubleEndedQueue.Bytes32Deque,bytes32) (node_modules/@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol#80-87) is never used and should be removed
ECDSA.recover(bytes32,bytes) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#88-92) is never used and should be removed
ECDSA.recover(bytes32,bytes32,bytes32) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#116-124) is never used and should be removed
ECDSA.toEthSignedMessageHash(bytes) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#197-199) is never used and should be removed
ECDSA.toEthSignedMessageHash(bytes32) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#183-187) is never used and should be removed
ECDSA.tryRecover(bytes32,bytes) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#55-72) is never used and should be removed
ECDSA.tryRecover(bytes32,bytes32,bytes32) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#101-109) is never used and should be removed
ERC1155._beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#429-436) is never used and should be removed
ERC1155._burnBatch(address,uint256[],uint256[]) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#366-392) is never used and should be removed
ERC1155._mintBatch(address,uint256[],uint256[],bytes) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#299-321) is never used and should be removed
ERC20._burn(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#285-301) is never used and should be removed
ERC20Votes._add(uint256,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol#258-260) is never used and should be removed
ERC20Votes._burn(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol#185-189) is never used and should be removed
ERC20Votes._subtract(uint256,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol#262-264) is never used and should be removed
Governor._cancel(address[],uint256[],bytes[],bytes32) (node_modules/@openzeppelin/contracts/governance/Governor.sol#372-390) is never used and should be removed
Governor._execute(uint256,address[],uint256[],bytes[],bytes32) (node_modules/@openzeppelin/contracts/governance/Governor.sol#316-328) is never used and should be removed
Governor._executor() (node_modules/@openzeppelin/contracts/governance/Governor.sol#556-558) is never used and should be removed
GovernorTimelockControl._cancel(address[],uint256[],bytes[],bytes32) (node_modules/@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol#129-143) is never used and should be removed
LoanCodec._setLoanAgreement.asm_0.__packTerm() (contracts/services/LoanCodec.sol#282-287) is never used and should be removed
LoanCodec._updateLoanTimes.asm_0.__packTerm() (contracts/services/LoanCodec.sol#474-479) is never used and should be removed
LoanCodec._validateLoanTerms.asm_0.__revert() (contracts/services/LoanCodec.sol#98-102) is never used and should be removed
LoanManager._setLoanAgreement.asm_0.__packTerm() (contracts/services/LoanCodec.sol#282-287) is never used and should be removed
LoanManager._updateLoanTimes.asm_0.__packTerm() (contracts/services/LoanCodec.sol#474-479) is never used and should be removed
LoanManager._validateLoanTerms.asm_0.__revert() (contracts/services/LoanCodec.sol#98-102) is never used and should be removed
Math.ceilDiv(uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#45-48) is never used and should be removed
Math.log10(uint256,Math.Rounding) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#296-301) is never used and should be removed
Math.log2(uint256,Math.Rounding) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#247-252) is never used and should be removed
Math.log256(uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#309-333) is never used and should be removed
Math.log256(uint256,Math.Rounding) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#339-344) is never used and should be removed
Math.max(uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#19-21) is never used and should be removed
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) is never used and should be removed
Math.mulDiv(uint256,uint256,uint256,Math.Rounding) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#140-151) is never used and should be removed
Math.sqrt(uint256,Math.Rounding) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#194-199) is never used and should be removed
PaymentBook._withdrawFunds(address,uint256) (contracts/databases/lending-databases/PaymentBook.sol#119-123) is never used and should be removed
SafeCast.toInt104(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#901-904) is never used and should be removed
SafeCast.toInt112(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#883-886) is never used and should be removed
SafeCast.toInt120(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#865-868) is never used and should be removed
SafeCast.toInt128(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#847-850) is never used and should be removed
SafeCast.toInt136(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#829-832) is never used and should be removed
SafeCast.toInt144(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#811-814) is never used and should be removed
SafeCast.toInt152(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#793-796) is never used and should be removed
SafeCast.toInt16(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#1099-1102) is never used and should be removed
SafeCast.toInt160(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#775-778) is never used and should be removed
SafeCast.toInt168(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#757-760) is never used and should be removed
SafeCast.toInt176(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#739-742) is never used and should be removed
SafeCast.toInt184(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#721-724) is never used and should be removed
SafeCast.toInt192(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#703-706) is never used and should be removed
SafeCast.toInt200(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#685-688) is never used and should be removed
SafeCast.toInt208(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#667-670) is never used and should be removed
SafeCast.toInt216(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#649-652) is never used and should be removed
SafeCast.toInt224(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#631-634) is never used and should be removed
SafeCast.toInt232(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#613-616) is never used and should be removed
SafeCast.toInt24(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#1081-1084) is never used and should be removed
SafeCast.toInt240(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#595-598) is never used and should be removed
SafeCast.toInt248(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#577-580) is never used and should be removed
SafeCast.toInt256(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#1131-1135) is never used and should be removed
SafeCast.toInt32(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#1063-1066) is never used and should be removed
SafeCast.toInt40(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#1045-1048) is never used and should be removed
SafeCast.toInt48(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#1027-1030) is never used and should be removed
SafeCast.toInt56(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#1009-1012) is never used and should be removed
SafeCast.toInt64(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#991-994) is never used and should be removed
SafeCast.toInt72(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#973-976) is never used and should be removed
SafeCast.toInt8(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#1117-1120) is never used and should be removed
SafeCast.toInt80(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#955-958) is never used and should be removed
SafeCast.toInt88(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#937-940) is never used and should be removed
SafeCast.toInt96(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#919-922) is never used and should be removed
SafeCast.toUint104(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#341-344) is never used and should be removed
SafeCast.toUint112(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#324-327) is never used and should be removed
SafeCast.toUint120(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#307-310) is never used and should be removed
SafeCast.toUint128(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#290-293) is never used and should be removed
SafeCast.toUint136(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#273-276) is never used and should be removed
SafeCast.toUint144(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#256-259) is never used and should be removed
SafeCast.toUint152(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#239-242) is never used and should be removed
SafeCast.toUint16(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#528-531) is never used and should be removed
SafeCast.toUint160(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#222-225) is never used and should be removed
SafeCast.toUint168(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#205-208) is never used and should be removed
SafeCast.toUint176(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#188-191) is never used and should be removed
SafeCast.toUint184(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#171-174) is never used and should be removed
SafeCast.toUint192(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#154-157) is never used and should be removed
SafeCast.toUint200(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#137-140) is never used and should be removed
SafeCast.toUint208(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#120-123) is never used and should be removed
SafeCast.toUint216(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#103-106) is never used and should be removed
SafeCast.toUint232(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#69-72) is never used and should be removed
SafeCast.toUint24(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#511-514) is never used and should be removed
SafeCast.toUint240(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#52-55) is never used and should be removed
SafeCast.toUint248(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#35-38) is never used and should be removed
SafeCast.toUint256(int256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#559-562) is never used and should be removed
SafeCast.toUint40(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#477-480) is never used and should be removed
SafeCast.toUint48(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#460-463) is never used and should be removed
SafeCast.toUint56(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#443-446) is never used and should be removed
SafeCast.toUint72(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#409-412) is never used and should be removed
SafeCast.toUint8(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#545-548) is never used and should be removed
SafeCast.toUint80(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#392-395) is never used and should be removed
SafeCast.toUint88(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#375-378) is never used and should be removed
SafeCast.toUint96(uint256) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#358-361) is never used and should be removed
Strings.toHexString(uint256) (node_modules/@openzeppelin/contracts/utils/Strings.sol#43-47) is never used and should be removed
Timers.getDeadline(Timers.Timestamp) (node_modules/@openzeppelin/contracts/utils/Timers.sol#14-16) is never used and should be removed
Timers.isExpired(Timers.BlockNumber) (node_modules/@openzeppelin/contracts/utils/Timers.sol#70-72) is never used and should be removed
Timers.isExpired(Timers.Timestamp) (node_modules/@openzeppelin/contracts/utils/Timers.sol#38-40) is never used and should be removed
Timers.isPending(Timers.BlockNumber) (node_modules/@openzeppelin/contracts/utils/Timers.sol#66-68) is never used and should be removed
Timers.isPending(Timers.Timestamp) (node_modules/@openzeppelin/contracts/utils/Timers.sol#34-36) is never used and should be removed
Timers.isStarted(Timers.BlockNumber) (node_modules/@openzeppelin/contracts/utils/Timers.sol#62-64) is never used and should be removed
Timers.isStarted(Timers.Timestamp) (node_modules/@openzeppelin/contracts/utils/Timers.sol#30-32) is never used and should be removed
Timers.isUnset(Timers.Timestamp) (node_modules/@openzeppelin/contracts/utils/Timers.sol#26-28) is never used and should be removed
Timers.reset(Timers.BlockNumber) (node_modules/@openzeppelin/contracts/utils/Timers.sol#54-56) is never used and should be removed
Timers.reset(Timers.Timestamp) (node_modules/@openzeppelin/contracts/utils/Timers.sol#22-24) is never used and should be removed
Timers.setDeadline(Timers.Timestamp,uint64) (node_modules/@openzeppelin/contracts/utils/Timers.sol#18-20) is never used and should be removed
TypeUtils.toUint32(uint256) (contracts/libraries/TypeUtils.sol#42-51) is never used and should be removed
TypeUtils.verifyUint32(uint256) (contracts/libraries/TypeUtils.sol#60-67) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version0.8.20 (contracts/LoanContract.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/lending-access/AccountantAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/lending-access/DebtBookAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/lending-access/ManagerAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/lending-access/PaymentBookAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/lending-access/VaultAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/lending-access/interfaces/IAccountantAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/lending-access/interfaces/IDebtBookAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/lending-access/interfaces/IManagerAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/lending-access/interfaces/IPaymentBookAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/lending-access/interfaces/IVaultAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/market-access/AnzaDebtMarketAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/market-access/AnzaDebtStorefrontAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/market-access/AnzaRefinanceStorefrontAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/market-access/AnzaSponsorshipStorefrontAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/market-access/interfaces/IAnzaDebtMarketAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/market-access/interfaces/IAnzaDebtStorefrontAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/market-access/interfaces/IAnzaRefinanceStorefrontAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/market-access/interfaces/IAnzaSponsorshipStorefrontAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/token-access/AnzaTokenAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/access/token-access/interfaces/IAnzaTokenAccessController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/dao/TimeLock.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/dao/governance/AnzaGovernance.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/custom-errors/StdAccessErrors.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/custom-errors/StdAnzaMarketErrors.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/custom-errors/StdAnzaTokenErrors.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/custom-errors/StdBaseMarketErrors.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/custom-errors/StdCodecErrors.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/custom-errors/StdLoanErrors.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/custom-errors/StdManagerErrors.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/custom-errors/StdMonetaryErrors.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/custom-errors/StdNotaryErrors.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/custom-errors/StdTreasureyErrors.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/custom-errors/StdVaultErrors.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/lending-databases/DebtBook.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/lending-databases/DebtTerms.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/lending-databases/PaymentBook.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/lending-databases/interfaces/IDebtBook.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.0 (contracts/databases/lending-databases/interfaces/IDebtTerms.sol#2) allows old versions
Pragma version0.8.20 (contracts/databases/lending-databases/interfaces/IPaymentBook.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/market-databases/AnzaBaseMarketParticipant.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/market-databases/interfaces/IAnzaBaseMarketParticipant.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/interfaces/ILoanContract.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.9 (contracts/libraries/BlockTime.sol#2) allows old versions
Pragma version0.8.20 (contracts/libraries/NonceLocker.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/libraries/TypeUtils.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#6) allows old versions
Pragma version^0.8.0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#6) allows old versions
Pragma version0.8.20 (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/libraries/lending-libraries/AnzaNotary.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/libraries/lending-libraries/DebtTermIndexer.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/libraries/lending-libraries/InterestCalculator.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/libraries/tokens-libraries/AnzaTokenIndexer.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/markets/AnzaDebtExchange.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/markets/AnzaDebtMarket.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/markets/interfaces/IAnzaDebtExchange.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/markets/interfaces/IAnzaDebtMarket.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/markets/storefronts/AnzaDebtStorefront.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/markets/storefronts/interfaces/IAnzaDebtStorefront.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/markets/storefronts/interfaces/IAnzaRefinanceStorefront.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/markets/storefronts/interfaces/IAnzaSponsorshipStorefront.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/services/CollateralVault.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/services/LoanAccountant.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/services/LoanCodec.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/services/LoanManager.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/services/LoanNotary.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/services/LoanTreasurey.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/services/interfaces/ICollateralVault.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/services/interfaces/ILoanAccountantExchange.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/services/interfaces/ILoanCodec.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/services/interfaces/ILoanManager.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/services/interfaces/ILoanNotary.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/services/interfaces/ILoanTreasurey.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/tokens/AnzaBaseToken.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/tokens/AnzaGovernanceToken.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/tokens/AnzaToken.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/tokens/AnzaTokenCatalog.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/tokens/AnzaTokenURIStorage.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/tokens/interfaces/IAnzaBase.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/tokens/interfaces/IAnzaToken.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/tokens/interfaces/IAnzaTokenCatalog.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.4.22<0.9.0 (lib/forge-std/src/console.sol#2) is too complex
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/access/IAccessControl.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/governance/Governor.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/governance/IGovernor.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/governance/extensions/GovernorSettings.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/governance/extensions/GovernorVotes.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/governance/utils/IVotes.sol#3) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol#4) allows old versions
Pragma version^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Checkpoints.sol#5) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Counters.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Timers.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#5) allows old versions
Pragma version^0.8.4 (node_modules/@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol#3) allows old versions
Pragma version0.8.20 (contracts/databases/globals/lending-constants/LoanContractFIRIntervals.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/lending-constants/LoanContractNumbers.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/lending-constants/LoanContractRoles.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/lending-constants/LoanContractStates.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/lending-constants/LoanContractTermMaps.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/lending-constants/LoanNotaryTypeHashes.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/market-constants/AnzaDebtMarketRoles.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/market-constants/AnzaDebtStorefrontSelectors.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/token-constants/AnzaTokenTransferTypes.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.20 (contracts/databases/globals/universal-numbers/StdNumbers.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
solc-0.8.20 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in LoanContract.initContract(address,uint256,bytes32,bytes) (contracts/LoanContract.sol#65-140):
	- (_success) = _loanTreasurerAddress.call{value: msg.value}(abi.encodeWithSignature(depositFunds(uint256,address,address),_totalDebts,msg.sender,_borrower)) (contracts/LoanContract.sol#110-117)
Low level call in LoanContract.initContract(uint256,address,address,bytes32) (contracts/LoanContract.sol#184-259):
	- (_success) = _loanTreasurerAddress.call{value: msg.value}(abi.encodeWithSignature(sponsorPayment(address,uint256),_lender,_debtId)) (contracts/LoanContract.sol#228-234)
Low level call in LoanContract.initContract(uint256,address,address) (contracts/LoanContract.sol#288-357):
	- (_success) = _loanTreasurerAddress.call{value: msg.value}(abi.encodeWithSignature(sponsorPayment(address,uint256),_lender,_debtId)) (contracts/LoanContract.sol#326-332)
Low level call in AnzaDebtExchange.executeRefinancePurchase(uint256,address,address,bytes32) (contracts/markets/AnzaDebtExchange.sol#247-273):
	- (_success) = address(_loanContract).call{value: msg.value}(abi.encodeWithSignature(initContract(uint256,address,address,bytes32),_debtId,_borrower,_purchaser,_contracTerms)) (contracts/markets/AnzaDebtExchange.sol#261-269)
Low level call in AnzaDebtExchange.executeSponsorshipPurchase(uint256,address) (contracts/markets/AnzaDebtExchange.sol#299-322):
	- (_success) = address(_loanContract).call{value: msg.value}(abi.encodeWithSignature(initContract(uint256,address,address),_debtId,_anzaToken.borrowerOf(_debtId),_purchaser)) (contracts/markets/AnzaDebtExchange.sol#311-318)
Low level call in AnzaDebtMarket.fallback() (contracts/markets/AnzaDebtMarket.sol#107-122):
	- (_success,_data) = _storefrontAddress.delegatecall(abi.encodePacked(_calldata)) (contracts/markets/AnzaDebtMarket.sol#116-118)
Low level call in AnzaDebtStorefront._transferDebt(address,uint256,uint256,address) (contracts/markets/storefronts/AnzaDebtStorefront.sol#290-310):
	- (_success,_data) = loanTreasurerAddress.call{value: _price}(abi.encodeWithSignature(executeDebtPurchase(address,uint256,address,address),_collateralAddress,_collateralId,_seller,msg.sender)) (contracts/markets/storefronts/AnzaDebtStorefront.sol#296-306)
Low level call in AnzaRefinanceStorefront._transferRefinance(uint256,uint256,address,bytes32) (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#286-306):
	- (_success,_data) = loanTreasurerAddress.call{value: _price}(abi.encodeWithSignature(executeRefinancePurchase(uint256,address,address,bytes32),_debtId,_seller,msg.sender,_contractTerms)) (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#292-302)
Low level call in AnzaSponsorshipStorefront._transferSponsorship(uint256,uint256,address) (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#273-290):
	- (_success,_data) = loanTreasurerAddress.call{value: _price}(abi.encodeWithSignature(executeSponsorshipPurchase(uint256,address),_debtId,msg.sender)) (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#278-286)
Low level call in Governor._execute(uint256,address[],uint256[],bytes[],bytes32) (node_modules/@openzeppelin/contracts/governance/Governor.sol#316-328):
	- (success,returndata) = targets[i].call{value: values[i]}(calldatas[i]) (node_modules/@openzeppelin/contracts/governance/Governor.sol#325)
Low level call in Governor.relay(address,uint256,bytes) (node_modules/@openzeppelin/contracts/governance/Governor.sol#543-550):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/governance/Governor.sol#548)
Low level call in TimelockController._execute(address,uint256,bytes) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#348-355):
	- (success) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/governance/TimelockController.sol#353)
Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#60-65):
	- (success) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#63)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#128-137):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)
Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#155-162):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#160)
Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#180-187):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#185)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Parameter LoanContract.supportsInterface(bytes4)._interfaceId (contracts/LoanContract.sol#31) is not in mixedCase
Parameter LoanContract.initContract(address,uint256,bytes32,bytes)._collateralAddress (contracts/LoanContract.sol#66) is not in mixedCase
Parameter LoanContract.initContract(address,uint256,bytes32,bytes)._collateralId (contracts/LoanContract.sol#67) is not in mixedCase
Parameter LoanContract.initContract(address,uint256,bytes32,bytes)._contractTerms (contracts/LoanContract.sol#68) is not in mixedCase
Parameter LoanContract.initContract(address,uint256,bytes32,bytes)._borrowerSignature (contracts/LoanContract.sol#69) is not in mixedCase
Parameter LoanContract.initContract(uint256,address,address,bytes32)._debtId (contracts/LoanContract.sol#185) is not in mixedCase
Parameter LoanContract.initContract(uint256,address,address,bytes32)._borrower (contracts/LoanContract.sol#186) is not in mixedCase
Parameter LoanContract.initContract(uint256,address,address,bytes32)._lender (contracts/LoanContract.sol#187) is not in mixedCase
Parameter LoanContract.initContract(uint256,address,address,bytes32)._contractTerms (contracts/LoanContract.sol#188) is not in mixedCase
Parameter LoanContract.initContract(uint256,address,address)._debtId (contracts/LoanContract.sol#289) is not in mixedCase
Parameter LoanContract.initContract(uint256,address,address)._borrower (contracts/LoanContract.sol#290) is not in mixedCase
Parameter LoanContract.initContract(uint256,address,address)._lender (contracts/LoanContract.sol#291) is not in mixedCase
Parameter LoanContract.revokeProposal(address,uint256,uint256,bytes32,bytes)._collateralAddress (contracts/LoanContract.sol#383) is not in mixedCase
Parameter LoanContract.revokeProposal(address,uint256,uint256,bytes32,bytes)._collateralId (contracts/LoanContract.sol#384) is not in mixedCase
Parameter LoanContract.revokeProposal(address,uint256,uint256,bytes32,bytes)._principal (contracts/LoanContract.sol#385) is not in mixedCase
Parameter LoanContract.revokeProposal(address,uint256,uint256,bytes32,bytes)._contractTerms (contracts/LoanContract.sol#386) is not in mixedCase
Parameter LoanContract.revokeProposal(address,uint256,uint256,bytes32,bytes)._borrowerSignature (contracts/LoanContract.sol#387) is not in mixedCase
Function LoanContract.__sealContract(uint64,uint256,bytes32) (contracts/LoanContract.sol#437-446) is not in mixedCase
Parameter LoanContract.__sealContract(uint64,uint256,bytes32)._now (contracts/LoanContract.sol#438) is not in mixedCase
Parameter LoanContract.__sealContract(uint64,uint256,bytes32)._activeLoanIndex (contracts/LoanContract.sol#439) is not in mixedCase
Parameter LoanContract.__sealContract(uint64,uint256,bytes32)._contractTerms (contracts/LoanContract.sol#440) is not in mixedCase
Function LoanContract.__duplicateContract(uint256,uint256) (contracts/LoanContract.sol#453-465) is not in mixedCase
Parameter LoanContract.__duplicateContract(uint256,uint256)._sourceDebtId (contracts/LoanContract.sol#454) is not in mixedCase
Parameter LoanContract.__duplicateContract(uint256,uint256)._activeLoanIndex (contracts/LoanContract.sol#455) is not in mixedCase
Function LoanContract._validateLoanTerms.asm_0.__revert() (contracts/services/LoanCodec.sol#98-102) is not in mixedCase
Parameter LoanContract._validateLoanTerms.asm_0.__revert()._errId__validateLoanTerms_asm_0___revert (contracts/services/LoanCodec.sol#98) is not in mixedCase
Function LoanContract._setLoanAgreement.asm_0.__packTerm() (contracts/services/LoanCodec.sol#405-410) is not in mixedCase
Parameter LoanContract._setLoanAgreement.asm_0.__packTerm()._mask__setLoanAgreement_asm_0___packTerm (contracts/services/LoanCodec.sol#405) is not in mixedCase
Parameter LoanContract._setLoanAgreement.asm_0.__packTerm()._map__setLoanAgreement_asm_0___packTerm (contracts/services/LoanCodec.sol#405) is not in mixedCase
Parameter LoanContract._setLoanAgreement.asm_0.__packTerm()._pos__setLoanAgreement_asm_0___packTerm (contracts/services/LoanCodec.sol#405) is not in mixedCase
Parameter LoanContract._setLoanAgreement.asm_0.__packTerm()._val__setLoanAgreement_asm_0___packTerm (contracts/services/LoanCodec.sol#405) is not in mixedCase
Function LoanContract._updateLoanTimes.asm_0.__packTerm() (contracts/services/LoanCodec.sol#474-479) is not in mixedCase
Parameter LoanContract._updateLoanTimes.asm_0.__packTerm()._mask__updateLoanTimes_asm_0___packTerm (contracts/services/LoanCodec.sol#474) is not in mixedCase
Parameter LoanContract._updateLoanTimes.asm_0.__packTerm()._map__updateLoanTimes_asm_0___packTerm (contracts/services/LoanCodec.sol#474) is not in mixedCase
Parameter LoanContract._updateLoanTimes.asm_0.__packTerm()._pos__updateLoanTimes_asm_0___packTerm (contracts/services/LoanCodec.sol#474) is not in mixedCase
Parameter LoanContract._updateLoanTimes.asm_0.__packTerm()._val__updateLoanTimes_asm_0___packTerm (contracts/services/LoanCodec.sol#474) is not in mixedCase
Parameter AccountantAccessController.supportsInterface(bytes4)._interfaceId (contracts/access/lending-access/AccountantAccessController.sol#38) is not in mixedCase
Function AccountantAccessController.__setLoanContract(address) (contracts/access/lending-access/AccountantAccessController.sol#66-77) is not in mixedCase
Parameter AccountantAccessController.__setLoanContract(address)._loanContractAddress (contracts/access/lending-access/AccountantAccessController.sol#66) is not in mixedCase
Function AccountantAccessController.__setCollateralVault(address) (contracts/access/lending-access/AccountantAccessController.sol#79-87) is not in mixedCase
Parameter AccountantAccessController.__setCollateralVault(address)._collateralVaultAddress (contracts/access/lending-access/AccountantAccessController.sol#79) is not in mixedCase
Function AccountantAccessController.__swapRole(bytes32,address,address) (contracts/access/lending-access/AccountantAccessController.sol#89-96) is not in mixedCase
Parameter AccountantAccessController.__swapRole(bytes32,address,address)._role (contracts/access/lending-access/AccountantAccessController.sol#90) is not in mixedCase
Parameter AccountantAccessController.__swapRole(bytes32,address,address)._prevRoleHolder (contracts/access/lending-access/AccountantAccessController.sol#91) is not in mixedCase
Parameter AccountantAccessController.__swapRole(bytes32,address,address)._newRoleHolder (contracts/access/lending-access/AccountantAccessController.sol#92) is not in mixedCase
Variable AccountantAccessController._loanContract (contracts/access/lending-access/AccountantAccessController.sol#22) is not in mixedCase
Variable AccountantAccessController._loanDebtTerms (contracts/access/lending-access/AccountantAccessController.sol#23) is not in mixedCase
Variable AccountantAccessController._loanManager (contracts/access/lending-access/AccountantAccessController.sol#24) is not in mixedCase
Variable AccountantAccessController._loanCodec (contracts/access/lending-access/AccountantAccessController.sol#25) is not in mixedCase
Variable AccountantAccessController._collateralVault (contracts/access/lending-access/AccountantAccessController.sol#26) is not in mixedCase
Parameter DebtBookAccessController.supportsInterface(bytes4)._interfaceId (contracts/access/lending-access/DebtBookAccessController.sol#16) is not in mixedCase
Variable DebtBookAccessController._anzaToken (contracts/access/lending-access/DebtBookAccessController.sol#12) is not in mixedCase
Variable DebtBookAccessController._collateralVault (contracts/access/lending-access/DebtBookAccessController.sol#13) is not in mixedCase
Parameter ManagerAccessController.supportsInterface(bytes4)._interfaceId (contracts/access/lending-access/ManagerAccessController.sol#26) is not in mixedCase
Function ManagerAccessController.__setLoanTreasurer(address) (contracts/access/lending-access/ManagerAccessController.sol#67-72) is not in mixedCase
Parameter ManagerAccessController.__setLoanTreasurer(address)._treasurer (contracts/access/lending-access/ManagerAccessController.sol#67) is not in mixedCase
Variable ManagerAccessController._loanTreasurerAddress (contracts/access/lending-access/ManagerAccessController.sol#16) is not in mixedCase
Parameter PaymentBookAccessController.supportsInterface(bytes4)._interfaceId (contracts/access/lending-access/PaymentBookAccessController.sol#11) is not in mixedCase
Variable PaymentBookAccessController._anzaToken (contracts/access/lending-access/PaymentBookAccessController.sol#8) is not in mixedCase
Parameter VaultAccessController.supportsInterface(bytes4)._interfaceId (contracts/access/lending-access/VaultAccessController.sol#30) is not in mixedCase
Parameter VaultAccessController.setLoanContract(address)._loanContractAddress (contracts/access/lending-access/VaultAccessController.sol#42) is not in mixedCase
Function VaultAccessController.__setLoanContract(address) (contracts/access/lending-access/VaultAccessController.sol#47-52) is not in mixedCase
Parameter VaultAccessController.__setLoanContract(address)._loanContractAddress (contracts/access/lending-access/VaultAccessController.sol#47) is not in mixedCase
Variable VaultAccessController._loanContract (contracts/access/lending-access/VaultAccessController.sol#16) is not in mixedCase
Parameter AnzaDebtMarketAccessController.supportsInterface(bytes4)._interfaceId (contracts/access/market-access/AnzaDebtMarketAccessController.sol#28) is not in mixedCase
Parameter AnzaDebtStorefrontAccessController.supportsInterface(bytes4)._interfaceId (contracts/access/market-access/AnzaDebtStorefrontAccessController.sol#37) is not in mixedCase
Variable AnzaDebtStorefrontAccessController._anzaTokenCatalog (contracts/access/market-access/AnzaDebtStorefrontAccessController.sol#20) is not in mixedCase
Variable AnzaDebtStorefrontAccessController._loanContract (contracts/access/market-access/AnzaDebtStorefrontAccessController.sol#21) is not in mixedCase
Variable AnzaDebtStorefrontAccessController._loanManager (contracts/access/market-access/AnzaDebtStorefrontAccessController.sol#22) is not in mixedCase
Parameter AnzaRefinanceStorefrontAccessController.supportsInterface(bytes4)._interfaceId (contracts/access/market-access/AnzaRefinanceStorefrontAccessController.sol#37) is not in mixedCase
Variable AnzaRefinanceStorefrontAccessController._anzaTokenCatalog (contracts/access/market-access/AnzaRefinanceStorefrontAccessController.sol#20) is not in mixedCase
Variable AnzaRefinanceStorefrontAccessController._loanContract (contracts/access/market-access/AnzaRefinanceStorefrontAccessController.sol#21) is not in mixedCase
Variable AnzaRefinanceStorefrontAccessController._loanManager (contracts/access/market-access/AnzaRefinanceStorefrontAccessController.sol#22) is not in mixedCase
Parameter AnzaSponsorshipStorefrontAccessController.supportsInterface(bytes4)._interfaceId (contracts/access/market-access/AnzaSponsorshipStorefrontAccessController.sol#37) is not in mixedCase
Variable AnzaSponsorshipStorefrontAccessController._anzaTokenCatalog (contracts/access/market-access/AnzaSponsorshipStorefrontAccessController.sol#20) is not in mixedCase
Variable AnzaSponsorshipStorefrontAccessController._loanContract (contracts/access/market-access/AnzaSponsorshipStorefrontAccessController.sol#21) is not in mixedCase
Variable AnzaSponsorshipStorefrontAccessController._loanManager (contracts/access/market-access/AnzaSponsorshipStorefrontAccessController.sol#22) is not in mixedCase
Parameter AnzaTokenAccessController.supportsInterface(bytes4)._interfaceId (contracts/access/token-access/AnzaTokenAccessController.sol#27) is not in mixedCase
Parameter DebtBook.supportsInterface(bytes4)._interfaceId (contracts/databases/lending-databases/DebtBook.sol#42) is not in mixedCase
Parameter DebtBook.debtBalance(uint256)._debtId (contracts/databases/lending-databases/DebtBook.sol#59) is not in mixedCase
Parameter DebtBook.lenderDebtBalance(uint256)._debtId (contracts/databases/lending-databases/DebtBook.sol#70) is not in mixedCase
Parameter DebtBook.borrowerDebtBalance(uint256)._debtId (contracts/databases/lending-databases/DebtBook.sol#86) is not in mixedCase
Parameter DebtBook.collateralDebtBalance(address,uint256)._collateralAddress (contracts/databases/lending-databases/DebtBook.sol#105) is not in mixedCase
Parameter DebtBook.collateralDebtBalance(address,uint256)._collateralId (contracts/databases/lending-databases/DebtBook.sol#106) is not in mixedCase
Parameter DebtBook.collateralDebtCount(address,uint256)._collateralAddress (contracts/databases/lending-databases/DebtBook.sol#137) is not in mixedCase
Parameter DebtBook.collateralDebtCount(address,uint256)._collateralId (contracts/databases/lending-databases/DebtBook.sol#138) is not in mixedCase
Parameter DebtBook.collateralDebtAt(uint256,uint256)._debtId (contracts/databases/lending-databases/DebtBook.sol#144) is not in mixedCase
Parameter DebtBook.collateralDebtAt(uint256,uint256)._index (contracts/databases/lending-databases/DebtBook.sol#145) is not in mixedCase
Parameter DebtBook.collateralDebtAt(address,uint256,uint256)._collateralAddress (contracts/databases/lending-databases/DebtBook.sol#176) is not in mixedCase
Parameter DebtBook.collateralDebtAt(address,uint256,uint256)._collateralId (contracts/databases/lending-databases/DebtBook.sol#177) is not in mixedCase
Parameter DebtBook.collateralDebtAt(address,uint256,uint256)._index (contracts/databases/lending-databases/DebtBook.sol#178) is not in mixedCase
Parameter DebtBook.collateralNonce(address,uint256)._collateralAddress (contracts/databases/lending-databases/DebtBook.sol#209) is not in mixedCase
Parameter DebtBook.collateralNonce(address,uint256)._collateralId (contracts/databases/lending-databases/DebtBook.sol#210) is not in mixedCase
Variable DebtBook._totalDebts (contracts/databases/lending-databases/DebtBook.sol#22) is not in mixedCase
Variable DebtBook.__debtMaps (contracts/databases/lending-databases/DebtBook.sol#25-26) is not in mixedCase
Parameter DebtTerms.supportsInterface(bytes4)._interfaceId (contracts/databases/lending-databases/DebtTerms.sol#18) is not in mixedCase
Parameter DebtTerms.debtTerms(uint256)._debtId (contracts/databases/lending-databases/DebtTerms.sol#32) is not in mixedCase
Parameter DebtTerms.loanState(uint256)._debtId (contracts/databases/lending-databases/DebtTerms.sol#70) is not in mixedCase
Parameter DebtTerms.firInterval(uint256)._debtId (contracts/databases/lending-databases/DebtTerms.sol#83) is not in mixedCase
Parameter DebtTerms.fixedInterestRate(uint256)._debtId (contracts/databases/lending-databases/DebtTerms.sol#96) is not in mixedCase
Parameter DebtTerms.isFixed(uint256)._debtId (contracts/databases/lending-databases/DebtTerms.sol#109) is not in mixedCase
Parameter DebtTerms.loanLastChecked(uint256)._debtId (contracts/databases/lending-databases/DebtTerms.sol#123) is not in mixedCase
Parameter DebtTerms.loanStart(uint256)._debtId (contracts/databases/lending-databases/DebtTerms.sol#136) is not in mixedCase
Parameter DebtTerms.loanDuration(uint256)._debtId (contracts/databases/lending-databases/DebtTerms.sol#149) is not in mixedCase
Parameter DebtTerms.loanCommital(uint256)._debtId (contracts/databases/lending-databases/DebtTerms.sol#162) is not in mixedCase
Parameter DebtTerms.loanClose(uint256)._debtId (contracts/databases/lending-databases/DebtTerms.sol#175) is not in mixedCase
Parameter DebtTerms.lenderRoyalties(uint256)._debtId (contracts/databases/lending-databases/DebtTerms.sol#188) is not in mixedCase
Parameter DebtTerms.activeLoanCount(uint256)._debtId (contracts/databases/lending-databases/DebtTerms.sol#204) is not in mixedCase
Parameter DebtTerms.checkCommitted(uint256)._debtId (contracts/databases/lending-databases/DebtTerms.sol#208) is not in mixedCase
Variable DebtTerms.__packedDebtTerms (contracts/databases/lending-databases/DebtTerms.sol#15) is not in mixedCase
Parameter PaymentBook.supportsInterface(bytes4)._interfaceId (contracts/databases/lending-databases/PaymentBook.sol#24) is not in mixedCase
Parameter PaymentBook.depositFunds(address)._payee (contracts/databases/lending-databases/PaymentBook.sol#41) is not in mixedCase
Parameter PaymentBook.depositFunds(uint256,address,address)._debtId (contracts/databases/lending-databases/PaymentBook.sol#58) is not in mixedCase
Parameter PaymentBook.depositFunds(uint256,address,address)._payer (contracts/databases/lending-databases/PaymentBook.sol#59) is not in mixedCase
Parameter PaymentBook.depositFunds(uint256,address,address)._payee (contracts/databases/lending-databases/PaymentBook.sol#60) is not in mixedCase
Parameter PaymentBook.withdrawableBalance(address)._account (contracts/databases/lending-databases/PaymentBook.sol#73) is not in mixedCase
Variable PaymentBook.__withdrawableBalance (contracts/databases/lending-databases/PaymentBook.sol#21) is not in mixedCase
Variable AnzaBaseMarketParticipant._proceeds (contracts/databases/market-databases/AnzaBaseMarketParticipant.sol#11) is not in mixedCase
Variable AnzaBaseMarketParticipant._canceledListings (contracts/databases/market-databases/AnzaBaseMarketParticipant.sol#12) is not in mixedCase
Variable AnzaBaseMarketParticipant._nonces (contracts/databases/market-databases/AnzaBaseMarketParticipant.sol#14) is not in mixedCase
Parameter BlockTime.daysToBlocks(uint256)._days (contracts/libraries/BlockTime.sol#5) is not in mixedCase
Parameter BlockTime.blocksToDays(uint256)._block (contracts/libraries/BlockTime.sol#10) is not in mixedCase
Parameter NonceLocker.spawn(address,uint8)._publisher (contracts/libraries/NonceLocker.sol#56) is not in mixedCase
Parameter NonceLocker.spawn(address,uint8)._category (contracts/libraries/NonceLocker.sol#57) is not in mixedCase
Parameter NonceLocker.ruin(address,uint8)._publisher (contracts/libraries/NonceLocker.sol#76) is not in mixedCase
Parameter NonceLocker.ruin(address,uint8)._category (contracts/libraries/NonceLocker.sol#77) is not in mixedCase
Parameter NonceLocker.oneTimeAccess(NonceLocker.Nonce,uint8)._nonce (contracts/libraries/NonceLocker.sol#92) is not in mixedCase
Parameter NonceLocker.oneTimeAccess(NonceLocker.Nonce,uint8)._category (contracts/libraries/NonceLocker.sol#92) is not in mixedCase
Function ABDKMath64x64.log_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#491-534) is not in mixedCase
Function ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) is not in mixedCase
Constant ABDKMath64x64.MIN_64x64 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#20) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ABDKMath64x64.MAX_64x64 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#25) is not in UPPER_CASE_WITH_UNDERSCORES
Function ABDKMathQuad.log_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#924-981) is not in mixedCase
Function ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) is not in mixedCase
Constant ABDKMathQuad.NaN (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#38) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter AnzaNotary.createContractTerms(uint8,uint8,uint8,uint8,uint32,uint32,uint32,uint8)._firInterval (contracts/libraries/lending-libraries/AnzaNotary.sol#36) is not in mixedCase
Parameter AnzaNotary.createContractTerms(uint8,uint8,uint8,uint8,uint32,uint32,uint32,uint8)._fixedInterestRate (contracts/libraries/lending-libraries/AnzaNotary.sol#37) is not in mixedCase
Parameter AnzaNotary.createContractTerms(uint8,uint8,uint8,uint8,uint32,uint32,uint32,uint8)._isFixed (contracts/libraries/lending-libraries/AnzaNotary.sol#38) is not in mixedCase
Parameter AnzaNotary.createContractTerms(uint8,uint8,uint8,uint8,uint32,uint32,uint32,uint8)._commital (contracts/libraries/lending-libraries/AnzaNotary.sol#39) is not in mixedCase
Parameter AnzaNotary.createContractTerms(uint8,uint8,uint8,uint8,uint32,uint32,uint32,uint8)._gracePeriod (contracts/libraries/lending-libraries/AnzaNotary.sol#40) is not in mixedCase
Parameter AnzaNotary.createContractTerms(uint8,uint8,uint8,uint8,uint32,uint32,uint32,uint8)._duration (contracts/libraries/lending-libraries/AnzaNotary.sol#41) is not in mixedCase
Parameter AnzaNotary.createContractTerms(uint8,uint8,uint8,uint8,uint32,uint32,uint32,uint8)._termsExpiry (contracts/libraries/lending-libraries/AnzaNotary.sol#42) is not in mixedCase
Parameter AnzaNotary.createContractTerms(uint8,uint8,uint8,uint8,uint32,uint32,uint32,uint8)._lenderRoyalties (contracts/libraries/lending-libraries/AnzaNotary.sol#43) is not in mixedCase
Parameter AnzaNotary.recoverSigner(ILoanNotary.ContractParams,AnzaNotary.DomainSeparator,bytes)._contractParams (contracts/libraries/lending-libraries/AnzaNotary.sol#70) is not in mixedCase
Parameter AnzaNotary.recoverSigner(ILoanNotary.ContractParams,AnzaNotary.DomainSeparator,bytes)._domainSeparator (contracts/libraries/lending-libraries/AnzaNotary.sol#71) is not in mixedCase
Parameter AnzaNotary.recoverSigner(ILoanNotary.ContractParams,AnzaNotary.DomainSeparator,bytes)._signature (contracts/libraries/lending-libraries/AnzaNotary.sol#72) is not in mixedCase
Parameter AnzaNotary.recoverSigner(IDebtNotary.DebtParams,AnzaNotary.DomainSeparator,bytes)._debtParams (contracts/libraries/lending-libraries/AnzaNotary.sol#85) is not in mixedCase
Parameter AnzaNotary.recoverSigner(IDebtNotary.DebtParams,AnzaNotary.DomainSeparator,bytes)._domainSeparator (contracts/libraries/lending-libraries/AnzaNotary.sol#86) is not in mixedCase
Parameter AnzaNotary.recoverSigner(IDebtNotary.DebtParams,AnzaNotary.DomainSeparator,bytes)._signature (contracts/libraries/lending-libraries/AnzaNotary.sol#87) is not in mixedCase
Parameter AnzaNotary.recoverSigner(address,IRefinanceNotary.RefinanceParams,AnzaNotary.DomainSeparator,bytes)._anzaTokenAddress (contracts/libraries/lending-libraries/AnzaNotary.sol#100) is not in mixedCase
Parameter AnzaNotary.recoverSigner(address,IRefinanceNotary.RefinanceParams,AnzaNotary.DomainSeparator,bytes)._refinanceParams (contracts/libraries/lending-libraries/AnzaNotary.sol#101) is not in mixedCase
Parameter AnzaNotary.recoverSigner(address,IRefinanceNotary.RefinanceParams,AnzaNotary.DomainSeparator,bytes)._domainSeparator (contracts/libraries/lending-libraries/AnzaNotary.sol#102) is not in mixedCase
Parameter AnzaNotary.recoverSigner(address,IRefinanceNotary.RefinanceParams,AnzaNotary.DomainSeparator,bytes)._signature (contracts/libraries/lending-libraries/AnzaNotary.sol#103) is not in mixedCase
Parameter AnzaNotary.recoverSigner(address,ISponsorshipNotary.SponsorshipParams,AnzaNotary.DomainSeparator,bytes)._anzaTokenAddress (contracts/libraries/lending-libraries/AnzaNotary.sol#120) is not in mixedCase
Parameter AnzaNotary.recoverSigner(address,ISponsorshipNotary.SponsorshipParams,AnzaNotary.DomainSeparator,bytes)._sponsorshipParams (contracts/libraries/lending-libraries/AnzaNotary.sol#121) is not in mixedCase
Parameter AnzaNotary.recoverSigner(address,ISponsorshipNotary.SponsorshipParams,AnzaNotary.DomainSeparator,bytes)._domainSeparator (contracts/libraries/lending-libraries/AnzaNotary.sol#122) is not in mixedCase
Parameter AnzaNotary.recoverSigner(address,ISponsorshipNotary.SponsorshipParams,AnzaNotary.DomainSeparator,bytes)._signature (contracts/libraries/lending-libraries/AnzaNotary.sol#123) is not in mixedCase
Parameter AnzaNotary.domainSeparator(AnzaNotary.DomainSeparator)._domainSeparator (contracts/libraries/lending-libraries/AnzaNotary.sol#140) is not in mixedCase
Parameter AnzaNotary.typeDataHash(ILoanNotary.ContractParams,AnzaNotary.DomainSeparator)._contractParams (contracts/libraries/lending-libraries/AnzaNotary.sol#158) is not in mixedCase
Parameter AnzaNotary.typeDataHash(ILoanNotary.ContractParams,AnzaNotary.DomainSeparator)._domainSeparator (contracts/libraries/lending-libraries/AnzaNotary.sol#159) is not in mixedCase
Parameter AnzaNotary.typeDataHash(IDebtNotary.DebtParams,AnzaNotary.DomainSeparator)._debtParams (contracts/libraries/lending-libraries/AnzaNotary.sol#175) is not in mixedCase
Parameter AnzaNotary.typeDataHash(IDebtNotary.DebtParams,AnzaNotary.DomainSeparator)._domainSeparator (contracts/libraries/lending-libraries/AnzaNotary.sol#176) is not in mixedCase
Parameter AnzaNotary.typeDataHash(address,IRefinanceNotary.RefinanceParams,AnzaNotary.DomainSeparator)._anzaTokenAddress (contracts/libraries/lending-libraries/AnzaNotary.sol#192) is not in mixedCase
Parameter AnzaNotary.typeDataHash(address,IRefinanceNotary.RefinanceParams,AnzaNotary.DomainSeparator)._refinanceParams (contracts/libraries/lending-libraries/AnzaNotary.sol#193) is not in mixedCase
Parameter AnzaNotary.typeDataHash(address,IRefinanceNotary.RefinanceParams,AnzaNotary.DomainSeparator)._domainSeparator (contracts/libraries/lending-libraries/AnzaNotary.sol#194) is not in mixedCase
Parameter AnzaNotary.typeDataHash(address,ISponsorshipNotary.SponsorshipParams,AnzaNotary.DomainSeparator)._anzaTokenAddress (contracts/libraries/lending-libraries/AnzaNotary.sol#210) is not in mixedCase
Parameter AnzaNotary.typeDataHash(address,ISponsorshipNotary.SponsorshipParams,AnzaNotary.DomainSeparator)._sponsorshipParams (contracts/libraries/lending-libraries/AnzaNotary.sol#211) is not in mixedCase
Parameter AnzaNotary.typeDataHash(address,ISponsorshipNotary.SponsorshipParams,AnzaNotary.DomainSeparator)._domainSeparator (contracts/libraries/lending-libraries/AnzaNotary.sol#212) is not in mixedCase
Parameter AnzaNotary.structHash(ILoanNotary.ContractParams)._contractParams (contracts/libraries/lending-libraries/AnzaNotary.sol#225) is not in mixedCase
Parameter AnzaNotary.structHash(IDebtNotary.DebtParams)._debtParams (contracts/libraries/lending-libraries/AnzaNotary.sol#241) is not in mixedCase
Parameter AnzaNotary.structHash(address,IRefinanceNotary.RefinanceParams)._anzaTokenAddress (contracts/libraries/lending-libraries/AnzaNotary.sol#257) is not in mixedCase
Parameter AnzaNotary.structHash(address,IRefinanceNotary.RefinanceParams)._refinanceParams (contracts/libraries/lending-libraries/AnzaNotary.sol#258) is not in mixedCase
Parameter AnzaNotary.structHash(address,ISponsorshipNotary.SponsorshipParams)._anzaTokenAddress (contracts/libraries/lending-libraries/AnzaNotary.sol#274) is not in mixedCase
Parameter AnzaNotary.structHash(address,ISponsorshipNotary.SponsorshipParams)._sponsorshipParams (contracts/libraries/lending-libraries/AnzaNotary.sol#275) is not in mixedCase
Parameter AnzaNotary.splitSignature(bytes)._signature (contracts/libraries/lending-libraries/AnzaNotary.sol#291) is not in mixedCase
Function DebtTermIndexer._loanLastChecked(DebtTermIndexer.DebtTermMap,uint256) (contracts/libraries/lending-libraries/DebtTermIndexer.sol#203-208) is not in mixedCase
Parameter DebtTermIndexer._loanLastChecked(DebtTermIndexer.DebtTermMap,uint256)._map (contracts/libraries/lending-libraries/DebtTermIndexer.sol#204) is not in mixedCase
Parameter DebtTermIndexer._loanLastChecked(DebtTermIndexer.DebtTermMap,uint256)._debtId (contracts/libraries/lending-libraries/DebtTermIndexer.sol#205) is not in mixedCase
Function DebtTermIndexer.__verifyUnlocked(bytes32) (contracts/libraries/lending-libraries/DebtTermIndexer.sol#399-406) is not in mixedCase
Parameter DebtTermIndexer.__verifyUnlocked(bytes32)._packedDebtTerms (contracts/libraries/lending-libraries/DebtTermIndexer.sol#399) is not in mixedCase
Parameter InterestCalculator.compoundWithTopoff(uint256,uint256,uint256)._principal (contracts/libraries/lending-libraries/InterestCalculator.sol#21) is not in mixedCase
Parameter InterestCalculator.compoundWithTopoff(uint256,uint256,uint256)._ratio (contracts/libraries/lending-libraries/InterestCalculator.sol#22) is not in mixedCase
Parameter InterestCalculator.compoundWithTopoff(uint256,uint256,uint256)._n (contracts/libraries/lending-libraries/InterestCalculator.sol#23) is not in mixedCase
Parameter InterestCalculator.compound(uint256,uint256,uint256)._principal (contracts/libraries/lending-libraries/InterestCalculator.sol#30) is not in mixedCase
Parameter InterestCalculator.compound(uint256,uint256,uint256)._ratio (contracts/libraries/lending-libraries/InterestCalculator.sol#31) is not in mixedCase
Parameter InterestCalculator.compound(uint256,uint256,uint256)._n (contracts/libraries/lending-libraries/InterestCalculator.sol#32) is not in mixedCase
Parameter InterestCalculator.pow(int128,uint256)._x (contracts/libraries/lending-libraries/InterestCalculator.sol#47) is not in mixedCase
Parameter InterestCalculator.pow(int128,uint256)._n (contracts/libraries/lending-libraries/InterestCalculator.sol#47) is not in mixedCase
Parameter InterestCalculator.topoff(uint256,uint256,uint256)._totalDebt (contracts/libraries/lending-libraries/InterestCalculator.sol#65) is not in mixedCase
Parameter InterestCalculator.topoff(uint256,uint256,uint256)._fixedInterestRate (contracts/libraries/lending-libraries/InterestCalculator.sol#66) is not in mixedCase
Parameter InterestCalculator.topoff(uint256,uint256,uint256)._firIntervals (contracts/libraries/lending-libraries/InterestCalculator.sol#67) is not in mixedCase
Parameter AnzaTokenIndexer.tokenIdToDebtId(uint256)._tokenId (contracts/libraries/tokens-libraries/AnzaTokenIndexer.sol#8) is not in mixedCase
Parameter AnzaTokenIndexer.debtIdToBorrowerTokenId(uint256)._debtId (contracts/libraries/tokens-libraries/AnzaTokenIndexer.sol#15) is not in mixedCase
Parameter AnzaTokenIndexer.debtIdToLenderTokenId(uint256)._debtId (contracts/libraries/tokens-libraries/AnzaTokenIndexer.sol#28) is not in mixedCase
Parameter AnzaDebtExchange.supportsInterface(bytes4)._interfaceId (contracts/markets/AnzaDebtExchange.sol#21) is not in mixedCase
Parameter AnzaDebtExchange.setAnzaToken(address)._anzaTokenAddress (contracts/markets/AnzaDebtExchange.sol#39) is not in mixedCase
Parameter AnzaDebtExchange.executeDebtPurchase(address,uint256,address,address)._collateralAddress (contracts/markets/AnzaDebtExchange.sol#60) is not in mixedCase
Parameter AnzaDebtExchange.executeDebtPurchase(address,uint256,address,address)._collateralId (contracts/markets/AnzaDebtExchange.sol#61) is not in mixedCase
Parameter AnzaDebtExchange.executeDebtPurchase(address,uint256,address,address)._borrower (contracts/markets/AnzaDebtExchange.sol#62) is not in mixedCase
Parameter AnzaDebtExchange.executeDebtPurchase(address,uint256,address,address)._purchaser (contracts/markets/AnzaDebtExchange.sol#63) is not in mixedCase
Parameter AnzaDebtExchange.executeDebtTransfer(address,uint256,address,address)._collateralAddress (contracts/markets/AnzaDebtExchange.sol#98) is not in mixedCase
Parameter AnzaDebtExchange.executeDebtTransfer(address,uint256,address,address)._collateralId (contracts/markets/AnzaDebtExchange.sol#99) is not in mixedCase
Parameter AnzaDebtExchange.executeDebtTransfer(address,uint256,address,address)._borrower (contracts/markets/AnzaDebtExchange.sol#100) is not in mixedCase
Parameter AnzaDebtExchange.executeDebtTransfer(address,uint256,address,address)._beneficiary (contracts/markets/AnzaDebtExchange.sol#101) is not in mixedCase
Parameter AnzaDebtExchange.executeRefinancePurchase(uint256,address,address,bytes32)._debtId (contracts/markets/AnzaDebtExchange.sol#248) is not in mixedCase
Parameter AnzaDebtExchange.executeRefinancePurchase(uint256,address,address,bytes32)._borrower (contracts/markets/AnzaDebtExchange.sol#249) is not in mixedCase
Parameter AnzaDebtExchange.executeRefinancePurchase(uint256,address,address,bytes32)._purchaser (contracts/markets/AnzaDebtExchange.sol#250) is not in mixedCase
Parameter AnzaDebtExchange.executeRefinancePurchase(uint256,address,address,bytes32)._contracTerms (contracts/markets/AnzaDebtExchange.sol#251) is not in mixedCase
Parameter AnzaDebtExchange.executeSponsorshipPurchase(uint256,address)._debtId (contracts/markets/AnzaDebtExchange.sol#300) is not in mixedCase
Parameter AnzaDebtExchange.executeSponsorshipPurchase(uint256,address)._purchaser (contracts/markets/AnzaDebtExchange.sol#301) is not in mixedCase
Function AnzaDebtExchange.__depositPayment(address,uint256,uint256) (contracts/markets/AnzaDebtExchange.sol#368-374) is not in mixedCase
Parameter AnzaDebtExchange.__depositPayment(address,uint256,uint256)._payer (contracts/markets/AnzaDebtExchange.sol#369) is not in mixedCase
Parameter AnzaDebtExchange.__depositPayment(address,uint256,uint256)._debtId (contracts/markets/AnzaDebtExchange.sol#370) is not in mixedCase
Parameter AnzaDebtExchange.__depositPayment(address,uint256,uint256)._payment (contracts/markets/AnzaDebtExchange.sol#371) is not in mixedCase
Parameter AnzaDebtStorefront.publishListing(uint256)._debtId (contracts/markets/storefronts/AnzaDebtStorefront.sol#65) is not in mixedCase
Parameter AnzaDebtStorefront.buyDebt(address,uint256,uint256,bytes)._collateralAddress (contracts/markets/storefronts/AnzaDebtStorefront.sol#111) is not in mixedCase
Parameter AnzaDebtStorefront.buyDebt(address,uint256,uint256,bytes)._collateralId (contracts/markets/storefronts/AnzaDebtStorefront.sol#112) is not in mixedCase
Parameter AnzaDebtStorefront.buyDebt(address,uint256,uint256,bytes)._termsExpiry (contracts/markets/storefronts/AnzaDebtStorefront.sol#113) is not in mixedCase
Parameter AnzaDebtStorefront.buyDebt(address,uint256,uint256,bytes)._sellerSignature (contracts/markets/storefronts/AnzaDebtStorefront.sol#114) is not in mixedCase
Parameter AnzaDebtStorefront.buyDebt(address,uint256,uint256,uint256,bytes)._collateralAddress (contracts/markets/storefronts/AnzaDebtStorefront.sol#150) is not in mixedCase
Parameter AnzaDebtStorefront.buyDebt(address,uint256,uint256,uint256,bytes)._collateralId (contracts/markets/storefronts/AnzaDebtStorefront.sol#151) is not in mixedCase
Parameter AnzaDebtStorefront.buyDebt(address,uint256,uint256,uint256,bytes)._listingNonce (contracts/markets/storefronts/AnzaDebtStorefront.sol#152) is not in mixedCase
Parameter AnzaDebtStorefront.buyDebt(address,uint256,uint256,uint256,bytes)._termsExpiry (contracts/markets/storefronts/AnzaDebtStorefront.sol#153) is not in mixedCase
Parameter AnzaDebtStorefront.buyDebt(address,uint256,uint256,uint256,bytes)._sellerSignature (contracts/markets/storefronts/AnzaDebtStorefront.sol#154) is not in mixedCase
Parameter AnzaRefinanceStorefront.publishListing(uint256)._debtId (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#69) is not in mixedCase
Parameter AnzaRefinanceStorefront.buyRefinance(uint256,uint256,bytes32,bytes)._debtId (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#117) is not in mixedCase
Parameter AnzaRefinanceStorefront.buyRefinance(uint256,uint256,bytes32,bytes)._termsExpiry (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#118) is not in mixedCase
Parameter AnzaRefinanceStorefront.buyRefinance(uint256,uint256,bytes32,bytes)._contractTerms (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#119) is not in mixedCase
Parameter AnzaRefinanceStorefront.buyRefinance(uint256,uint256,bytes32,bytes)._sellerSignature (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#120) is not in mixedCase
Parameter AnzaRefinanceStorefront.buyRefinance(uint256,uint256,uint256,bytes32,bytes)._debtId (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#159) is not in mixedCase
Parameter AnzaRefinanceStorefront.buyRefinance(uint256,uint256,uint256,bytes32,bytes)._listingNonce (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#160) is not in mixedCase
Parameter AnzaRefinanceStorefront.buyRefinance(uint256,uint256,uint256,bytes32,bytes)._termsExpiry (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#161) is not in mixedCase
Parameter AnzaRefinanceStorefront.buyRefinance(uint256,uint256,uint256,bytes32,bytes)._contractTerms (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#162) is not in mixedCase
Parameter AnzaRefinanceStorefront.buyRefinance(uint256,uint256,uint256,bytes32,bytes)._sellerSignature (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#163) is not in mixedCase
Parameter AnzaSponsorshipStorefront.publishListing(uint256)._debtId (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#69) is not in mixedCase
Parameter AnzaSponsorshipStorefront.buySponsorship(uint256,uint256,bytes)._debtId (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#117) is not in mixedCase
Parameter AnzaSponsorshipStorefront.buySponsorship(uint256,uint256,bytes)._termsExpiry (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#118) is not in mixedCase
Parameter AnzaSponsorshipStorefront.buySponsorship(uint256,uint256,bytes)._sellerSignature (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#119) is not in mixedCase
Parameter AnzaSponsorshipStorefront.buySponsorship(uint256,uint256,uint256,bytes)._debtId (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#153) is not in mixedCase
Parameter AnzaSponsorshipStorefront.buySponsorship(uint256,uint256,uint256,bytes)._listingNonce (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#154) is not in mixedCase
Parameter AnzaSponsorshipStorefront.buySponsorship(uint256,uint256,uint256,bytes)._termsExpiry (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#155) is not in mixedCase
Parameter AnzaSponsorshipStorefront.buySponsorship(uint256,uint256,uint256,bytes)._sellerSignature (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#156) is not in mixedCase
Parameter CollateralVault.supportsInterface(bytes4)._interfaceId (contracts/services/CollateralVault.sol#56) is not in mixedCase
Parameter CollateralVault.getCollateral(uint256)._debtId (contracts/services/CollateralVault.sol#64) is not in mixedCase
Parameter CollateralVault.setCollateral(address,address,uint256,uint256,uint256)._from (contracts/services/CollateralVault.sol#70) is not in mixedCase
Parameter CollateralVault.setCollateral(address,address,uint256,uint256,uint256)._collateralAddress (contracts/services/CollateralVault.sol#71) is not in mixedCase
Parameter CollateralVault.setCollateral(address,address,uint256,uint256,uint256)._collateralId (contracts/services/CollateralVault.sol#72) is not in mixedCase
Parameter CollateralVault.setCollateral(address,address,uint256,uint256,uint256)._debtId (contracts/services/CollateralVault.sol#73) is not in mixedCase
Parameter CollateralVault.setCollateral(address,address,uint256,uint256,uint256)._activeLoanIndex (contracts/services/CollateralVault.sol#74) is not in mixedCase
Parameter CollateralVault.depositAllowed(address,uint256,uint256)._collateralAddress (contracts/services/CollateralVault.sol#100) is not in mixedCase
Parameter CollateralVault.depositAllowed(address,uint256,uint256)._collateralId (contracts/services/CollateralVault.sol#101) is not in mixedCase
Parameter CollateralVault.depositAllowed(address,uint256,uint256)._debtId (contracts/services/CollateralVault.sol#102) is not in mixedCase
Parameter CollateralVault.withdrawAllowed(address,uint256)._to (contracts/services/CollateralVault.sol#128) is not in mixedCase
Parameter CollateralVault.withdrawAllowed(address,uint256)._debtId (contracts/services/CollateralVault.sol#129) is not in mixedCase
Parameter CollateralVault.withdraw(address,uint256)._to (contracts/services/CollateralVault.sol#158) is not in mixedCase
Parameter CollateralVault.withdraw(address,uint256)._debtId (contracts/services/CollateralVault.sol#159) is not in mixedCase
Parameter CollateralVault.onERC721Received(address,address,uint256,bytes)._operator (contracts/services/CollateralVault.sol#199) is not in mixedCase
Parameter CollateralVault.onERC721Received(address,address,uint256,bytes)._from (contracts/services/CollateralVault.sol#200) is not in mixedCase
Parameter CollateralVault.onERC721Received(address,address,uint256,bytes)._collateralId (contracts/services/CollateralVault.sol#201) is not in mixedCase
Parameter CollateralVault.onERC721Received(address,address,uint256,bytes)._data (contracts/services/CollateralVault.sol#202) is not in mixedCase
Variable CollateralVault.__collaterals (contracts/services/CollateralVault.sol#25) is not in mixedCase
Parameter LoanAccountant.supportsInterface(bytes4)._interfaceId (contracts/services/LoanAccountant.sol#99) is not in mixedCase
Function LoanAccountant.__assessUpdatePermitted(uint256) (contracts/services/LoanAccountant.sol#128-132) is not in mixedCase
Parameter LoanAccountant.__assessUpdatePermitted(uint256)._debtId (contracts/services/LoanAccountant.sol#128) is not in mixedCase
Function LoanAccountant.__updateLoanState(uint256) (contracts/services/LoanAccountant.sol#145-151) is not in mixedCase
Parameter LoanAccountant.__updateLoanState(uint256)._debtId (contracts/services/LoanAccountant.sol#145) is not in mixedCase
Function LoanAccountant.__updateDebtWithInterest(uint256,uint256) (contracts/services/LoanAccountant.sol#176-203) is not in mixedCase
Parameter LoanAccountant.__updateDebtWithInterest(uint256,uint256)._debtId (contracts/services/LoanAccountant.sol#177) is not in mixedCase
Parameter LoanAccountant.__updateDebtWithInterest(uint256,uint256)._loanLastChecked (contracts/services/LoanAccountant.sol#178) is not in mixedCase
Variable LoanAccountant.__updatePermitted (contracts/services/LoanAccountant.sol#14) is not in mixedCase
Parameter LoanCodec.supportsInterface(bytes4)._interfaceId (contracts/services/LoanCodec.sol#41) is not in mixedCase
Parameter LoanCodec.totalFirIntervals(uint256,uint256)._debtId (contracts/services/LoanCodec.sol#60) is not in mixedCase
Parameter LoanCodec.totalFirIntervals(uint256,uint256)._timeElapsed (contracts/services/LoanCodec.sol#61) is not in mixedCase
Function LoanCodec._validateLoanTerms.asm_0.__revert() (contracts/services/LoanCodec.sol#98-102) is not in mixedCase
Parameter LoanCodec._validateLoanTerms.asm_0.__revert()._errId__validateLoanTerms_asm_0___revert (contracts/services/LoanCodec.sol#98) is not in mixedCase
Function LoanCodec._setLoanAgreement.asm_0.__packTerm() (contracts/services/LoanCodec.sol#405-410) is not in mixedCase
Parameter LoanCodec._setLoanAgreement.asm_0.__packTerm()._mask__setLoanAgreement_asm_0___packTerm (contracts/services/LoanCodec.sol#405) is not in mixedCase
Parameter LoanCodec._setLoanAgreement.asm_0.__packTerm()._map__setLoanAgreement_asm_0___packTerm (contracts/services/LoanCodec.sol#405) is not in mixedCase
Parameter LoanCodec._setLoanAgreement.asm_0.__packTerm()._pos__setLoanAgreement_asm_0___packTerm (contracts/services/LoanCodec.sol#405) is not in mixedCase
Parameter LoanCodec._setLoanAgreement.asm_0.__packTerm()._val__setLoanAgreement_asm_0___packTerm (contracts/services/LoanCodec.sol#405) is not in mixedCase
Function LoanCodec._updateLoanTimes.asm_0.__packTerm() (contracts/services/LoanCodec.sol#474-479) is not in mixedCase
Parameter LoanCodec._updateLoanTimes.asm_0.__packTerm()._mask__updateLoanTimes_asm_0___packTerm (contracts/services/LoanCodec.sol#474) is not in mixedCase
Parameter LoanCodec._updateLoanTimes.asm_0.__packTerm()._map__updateLoanTimes_asm_0___packTerm (contracts/services/LoanCodec.sol#474) is not in mixedCase
Parameter LoanCodec._updateLoanTimes.asm_0.__packTerm()._pos__updateLoanTimes_asm_0___packTerm (contracts/services/LoanCodec.sol#474) is not in mixedCase
Parameter LoanCodec._updateLoanTimes.asm_0.__packTerm()._val__updateLoanTimes_asm_0___packTerm (contracts/services/LoanCodec.sol#474) is not in mixedCase
Parameter LoanManager.supportsInterface(bytes4)._interfaceId (contracts/services/LoanManager.sol#33) is not in mixedCase
Parameter LoanManager.setAnzaToken(address)._anzaToken (contracts/services/LoanManager.sol#60) is not in mixedCase
Parameter LoanManager.setCollateralVault(address)._collateralVault (contracts/services/LoanManager.sol#75) is not in mixedCase
Parameter LoanManager.updateLoanState(uint256)._debtId (contracts/services/LoanManager.sol#102) is not in mixedCase
Parameter LoanManager.verifyLoanActive(uint256)._debtId (contracts/services/LoanManager.sol#151) is not in mixedCase
Parameter LoanManager.verifyLoanNotExpired(uint256)._debtId (contracts/services/LoanManager.sol#156) is not in mixedCase
Parameter LoanManager.checkProposalActive(address,uint256,uint256)._collateralAddress (contracts/services/LoanManager.sol#161) is not in mixedCase
Parameter LoanManager.checkProposalActive(address,uint256,uint256)._collateralId (contracts/services/LoanManager.sol#162) is not in mixedCase
Parameter LoanManager.checkProposalActive(address,uint256,uint256)._collateralNonce (contracts/services/LoanManager.sol#163) is not in mixedCase
Parameter LoanManager.checkLoanActive(uint256)._debtId (contracts/services/LoanManager.sol#173) is not in mixedCase
Parameter LoanManager.checkLoanDefault(uint256)._debtId (contracts/services/LoanManager.sol#179) is not in mixedCase
Parameter LoanManager.checkLoanClosed(uint256)._debtId (contracts/services/LoanManager.sol#185) is not in mixedCase
Parameter LoanManager.checkLoanExpired(uint256)._debtId (contracts/services/LoanManager.sol#189) is not in mixedCase
Function LoanManager._validateLoanTerms.asm_0.__revert() (contracts/services/LoanCodec.sol#98-102) is not in mixedCase
Parameter LoanManager._validateLoanTerms.asm_0.__revert()._errId__validateLoanTerms_asm_0___revert (contracts/services/LoanCodec.sol#98) is not in mixedCase
Function LoanManager._setLoanAgreement.asm_0.__packTerm() (contracts/services/LoanCodec.sol#405-410) is not in mixedCase
Parameter LoanManager._setLoanAgreement.asm_0.__packTerm()._mask__setLoanAgreement_asm_0___packTerm (contracts/services/LoanCodec.sol#405) is not in mixedCase
Parameter LoanManager._setLoanAgreement.asm_0.__packTerm()._map__setLoanAgreement_asm_0___packTerm (contracts/services/LoanCodec.sol#405) is not in mixedCase
Parameter LoanManager._setLoanAgreement.asm_0.__packTerm()._pos__setLoanAgreement_asm_0___packTerm (contracts/services/LoanCodec.sol#405) is not in mixedCase
Parameter LoanManager._setLoanAgreement.asm_0.__packTerm()._val__setLoanAgreement_asm_0___packTerm (contracts/services/LoanCodec.sol#405) is not in mixedCase
Function LoanManager._updateLoanTimes.asm_0.__packTerm() (contracts/services/LoanCodec.sol#474-479) is not in mixedCase
Parameter LoanManager._updateLoanTimes.asm_0.__packTerm()._mask__updateLoanTimes_asm_0___packTerm (contracts/services/LoanCodec.sol#474) is not in mixedCase
Parameter LoanManager._updateLoanTimes.asm_0.__packTerm()._map__updateLoanTimes_asm_0___packTerm (contracts/services/LoanCodec.sol#474) is not in mixedCase
Parameter LoanManager._updateLoanTimes.asm_0.__packTerm()._pos__updateLoanTimes_asm_0___packTerm (contracts/services/LoanCodec.sol#474) is not in mixedCase
Parameter LoanManager._updateLoanTimes.asm_0.__packTerm()._val__updateLoanTimes_asm_0___packTerm (contracts/services/LoanCodec.sol#474) is not in mixedCase
Parameter LoanNotary.supportsInterface(bytes4)._interfaceId (contracts/services/LoanNotary.sol#46) is not in mixedCase
Function LoanNotary.__typeDataHash(ILoanNotary.ContractParams) (contracts/services/LoanNotary.sol#147-158) is not in mixedCase
Parameter LoanNotary.__typeDataHash(ILoanNotary.ContractParams)._contractParams (contracts/services/LoanNotary.sol#148) is not in mixedCase
Function LoanNotary.__structHash(ILoanNotary.ContractParams) (contracts/services/LoanNotary.sol#172-186) is not in mixedCase
Parameter LoanNotary.__structHash(ILoanNotary.ContractParams)._contractParams (contracts/services/LoanNotary.sol#173) is not in mixedCase
Variable LoanNotary.__loanNotary_domainSeparator (contracts/services/LoanNotary.sol#28) is not in mixedCase
Parameter DebtNotary.supportsInterface(bytes4)._interfaceId (contracts/services/LoanNotary.sol#223) is not in mixedCase
Function DebtNotary.__typeDataHash(IDebtNotary.DebtParams) (contracts/services/LoanNotary.sol#289-300) is not in mixedCase
Parameter DebtNotary.__typeDataHash(IDebtNotary.DebtParams)._debtParams (contracts/services/LoanNotary.sol#290) is not in mixedCase
Function DebtNotary.__structHash(IDebtNotary.DebtParams) (contracts/services/LoanNotary.sol#315-329) is not in mixedCase
Parameter DebtNotary.__structHash(IDebtNotary.DebtParams)._debtParams (contracts/services/LoanNotary.sol#316) is not in mixedCase
Variable DebtNotary.__debtNotary_domainSeparator (contracts/services/LoanNotary.sol#198) is not in mixedCase
Variable DebtNotary.__debtNotary_anzaTokenAddress (contracts/services/LoanNotary.sol#199) is not in mixedCase
Parameter RefinanceNotary.supportsInterface(bytes4)._interfaceId (contracts/services/LoanNotary.sol#368) is not in mixedCase
Function RefinanceNotary.__typeDataHash(IRefinanceNotary.RefinanceParams) (contracts/services/LoanNotary.sol#433-444) is not in mixedCase
Parameter RefinanceNotary.__typeDataHash(IRefinanceNotary.RefinanceParams)._refinanceParams (contracts/services/LoanNotary.sol#434) is not in mixedCase
Function RefinanceNotary.__structHash(IRefinanceNotary.RefinanceParams) (contracts/services/LoanNotary.sol#459-473) is not in mixedCase
Parameter RefinanceNotary.__structHash(IRefinanceNotary.RefinanceParams)._refinanceParams (contracts/services/LoanNotary.sol#460) is not in mixedCase
Variable RefinanceNotary.__refinanceNotary_domainSeparator (contracts/services/LoanNotary.sol#343) is not in mixedCase
Variable RefinanceNotary.__refinanceNotary_anzaTokenAddress (contracts/services/LoanNotary.sol#344) is not in mixedCase
Parameter SponsorshipNotary.supportsInterface(bytes4)._interfaceId (contracts/services/LoanNotary.sol#511) is not in mixedCase
Function SponsorshipNotary.__typeDataHash(ISponsorshipNotary.SponsorshipParams) (contracts/services/LoanNotary.sol#577-588) is not in mixedCase
Parameter SponsorshipNotary.__typeDataHash(ISponsorshipNotary.SponsorshipParams)._sponsorshipParams (contracts/services/LoanNotary.sol#578) is not in mixedCase
Function SponsorshipNotary.__structHash(ISponsorshipNotary.SponsorshipParams) (contracts/services/LoanNotary.sol#603-617) is not in mixedCase
Parameter SponsorshipNotary.__structHash(ISponsorshipNotary.SponsorshipParams)._sponsorshipParams (contracts/services/LoanNotary.sol#604) is not in mixedCase
Variable SponsorshipNotary.__sponsorshipNotary_domainSeparator (contracts/services/LoanNotary.sol#486) is not in mixedCase
Variable SponsorshipNotary.__sponsorshipNotary_anzaTokenAddress (contracts/services/LoanNotary.sol#487) is not in mixedCase
Parameter AnzaBaseToken.supportsInterface(bytes4)._interfaceId (contracts/tokens/AnzaBaseToken.sol#38) is not in mixedCase
Variable AnzaBaseToken.__name (contracts/tokens/AnzaBaseToken.sol#17) is not in mixedCase
Variable AnzaBaseToken.__symbol (contracts/tokens/AnzaBaseToken.sol#18) is not in mixedCase
Parameter AnzaToken.supportsInterface(bytes4)._interfaceId (contracts/tokens/AnzaToken.sol#23) is not in mixedCase
Parameter AnzaToken.safeTransferFrom(address,address,uint256,uint256,bytes)._from (contracts/tokens/AnzaToken.sol#43) is not in mixedCase
Parameter AnzaToken.safeTransferFrom(address,address,uint256,uint256,bytes)._to (contracts/tokens/AnzaToken.sol#44) is not in mixedCase
Parameter AnzaToken.safeTransferFrom(address,address,uint256,uint256,bytes)._debtId (contracts/tokens/AnzaToken.sol#45) is not in mixedCase
Parameter AnzaToken.safeTransferFrom(address,address,uint256,uint256,bytes)._amount (contracts/tokens/AnzaToken.sol#46) is not in mixedCase
Parameter AnzaToken.safeTransferFrom(address,address,uint256,uint256,bytes)._data (contracts/tokens/AnzaToken.sol#47) is not in mixedCase
Parameter AnzaToken.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)._from (contracts/tokens/AnzaToken.sol#61) is not in mixedCase
Parameter AnzaToken.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)._to (contracts/tokens/AnzaToken.sol#62) is not in mixedCase
Parameter AnzaToken.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)._ids (contracts/tokens/AnzaToken.sol#63) is not in mixedCase
Parameter AnzaToken.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)._amounts (contracts/tokens/AnzaToken.sol#64) is not in mixedCase
Parameter AnzaToken.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)._data (contracts/tokens/AnzaToken.sol#65) is not in mixedCase
Parameter AnzaToken.mintPair(address,address,uint256,uint256,bytes)._lender (contracts/tokens/AnzaToken.sol#101) is not in mixedCase
Parameter AnzaToken.mintPair(address,address,uint256,uint256,bytes)._borrower (contracts/tokens/AnzaToken.sol#102) is not in mixedCase
Parameter AnzaToken.mintPair(address,address,uint256,uint256,bytes)._debtId (contracts/tokens/AnzaToken.sol#103) is not in mixedCase
Parameter AnzaToken.mintPair(address,address,uint256,uint256,bytes)._amount (contracts/tokens/AnzaToken.sol#104) is not in mixedCase
Parameter AnzaToken.mintPair(address,address,uint256,uint256,bytes)._collateralURI (contracts/tokens/AnzaToken.sol#105) is not in mixedCase
Parameter AnzaToken.mint(uint256,uint256)._debtId (contracts/tokens/AnzaToken.sol#115) is not in mixedCase
Parameter AnzaToken.mint(uint256,uint256)._amount (contracts/tokens/AnzaToken.sol#116) is not in mixedCase
Parameter AnzaToken.burnBorrowerToken(uint256)._debtId (contracts/tokens/AnzaToken.sol#125) is not in mixedCase
Parameter AnzaToken.burnLenderToken(uint256,uint256)._debtId (contracts/tokens/AnzaToken.sol#132) is not in mixedCase
Parameter AnzaToken.burnLenderToken(uint256,uint256)._amount (contracts/tokens/AnzaToken.sol#133) is not in mixedCase
Function AnzaToken.__debtTransferFrom(address,address,uint256,uint256,bytes) (contracts/tokens/AnzaToken.sol#246-260) is not in mixedCase
Parameter AnzaToken.__debtTransferFrom(address,address,uint256,uint256,bytes)._from (contracts/tokens/AnzaToken.sol#247) is not in mixedCase
Parameter AnzaToken.__debtTransferFrom(address,address,uint256,uint256,bytes)._to (contracts/tokens/AnzaToken.sol#248) is not in mixedCase
Parameter AnzaToken.__debtTransferFrom(address,address,uint256,uint256,bytes)._debtId (contracts/tokens/AnzaToken.sol#249) is not in mixedCase
Function AnzaToken.__debtBatchTransferFrom(address,address,uint256[],uint256[],bytes) (contracts/tokens/AnzaToken.sol#262-271) is not in mixedCase
Parameter AnzaToken.__debtBatchTransferFrom(address,address,uint256[],uint256[],bytes)._from (contracts/tokens/AnzaToken.sol#263) is not in mixedCase
Parameter AnzaToken.__debtBatchTransferFrom(address,address,uint256[],uint256[],bytes)._to (contracts/tokens/AnzaToken.sol#264) is not in mixedCase
Parameter AnzaToken.__debtBatchTransferFrom(address,address,uint256[],uint256[],bytes)._ids (contracts/tokens/AnzaToken.sol#265) is not in mixedCase
Parameter AnzaToken.__debtBatchTransferFrom(address,address,uint256[],uint256[],bytes)._amounts (contracts/tokens/AnzaToken.sol#266) is not in mixedCase
Function AnzaToken.__sponsorshipTransferFrom(address,address,uint256,uint256,bytes) (contracts/tokens/AnzaToken.sol#273-287) is not in mixedCase
Parameter AnzaToken.__sponsorshipTransferFrom(address,address,uint256,uint256,bytes)._from (contracts/tokens/AnzaToken.sol#274) is not in mixedCase
Parameter AnzaToken.__sponsorshipTransferFrom(address,address,uint256,uint256,bytes)._to (contracts/tokens/AnzaToken.sol#275) is not in mixedCase
Parameter AnzaToken.__sponsorshipTransferFrom(address,address,uint256,uint256,bytes)._debtId (contracts/tokens/AnzaToken.sol#276) is not in mixedCase
Parameter AnzaToken.__sponsorshipTransferFrom(address,address,uint256,uint256,bytes)._amount (contracts/tokens/AnzaToken.sol#277) is not in mixedCase
Parameter AnzaTokenCatalog.supportsInterface(bytes4)._interfaceId (contracts/tokens/AnzaTokenCatalog.sol#20) is not in mixedCase
Parameter AnzaTokenCatalog.ownerOf(uint256)._tokenId (contracts/tokens/AnzaTokenCatalog.sol#25) is not in mixedCase
Parameter AnzaTokenCatalog.borrowerOf(uint256)._debtId (contracts/tokens/AnzaTokenCatalog.sol#29) is not in mixedCase
Parameter AnzaTokenCatalog.lenderOf(uint256)._debtId (contracts/tokens/AnzaTokenCatalog.sol#33) is not in mixedCase
Variable AnzaTokenCatalog.__owners (contracts/tokens/AnzaTokenCatalog.sol#16) is not in mixedCase
Variable AnzaTokenCatalog.__totalSupply (contracts/tokens/AnzaTokenCatalog.sol#17) is not in mixedCase
Parameter AnzaTokenURIStorage.uri(uint256)._tokenId (contracts/tokens/AnzaTokenURIStorage.sol#44) is not in mixedCase
Constant AnzaTokenURIStorage._baseURI (contracts/tokens/AnzaTokenURIStorage.sol#20) is not in UPPER_CASE_WITH_UNDERSCORES
Contract console (lib/forge-std/src/console.sol#4-1534) is not in CapWords
Function IGovernor.COUNTING_MODE() (node_modules/@openzeppelin/contracts/governance/IGovernor.sol#107) is not in mixedCase
Function GovernorCountingSimple.COUNTING_MODE() (node_modules/@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol#36-38) is not in mixedCase
Function ERC20Permit.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#81-83) is not in mixedCase
Variable ERC20Permit._PERMIT_TYPEHASH_DEPRECATED_SLOT (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#37) is not in mixedCase
Function IERC20Permit.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#59) is not in mixedCase
Variable EIP712._CACHED_DOMAIN_SEPARATOR (node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol#31) is not in mixedCase
Variable EIP712._CACHED_CHAIN_ID (node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol#32) is not in mixedCase
Variable EIP712._CACHED_THIS (node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol#33) is not in mixedCase
Variable EIP712._HASHED_NAME (node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol#35) is not in mixedCase
Variable EIP712._HASHED_VERSION (node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol#36) is not in mixedCase
Variable EIP712._TYPE_HASH (node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol#37) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Variable LibLoanContractFIRIntervalMultipliers._2_WEEKLY_MULTIPLIER (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#57) is too similar to LibLoanContractFIRIntervalMultipliers._4_WEEKLY_MULTIPLIER (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#58)
Variable LibLoanContractFIRIntervalMultipliers._2_WEEKLY_MULTIPLIER (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#57) is too similar to LibLoanContractFIRIntervalMultipliers._6_WEEKLY_MULTIPLIER (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#59)
Variable LibLoanContractFIRIntervalMultipliers._4_WEEKLY_MULTIPLIER (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#58) is too similar to LibLoanContractFIRIntervalMultipliers._6_WEEKLY_MULTIPLIER (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#59)
Variable LibLoanContractFIRIntervalMultipliers._6_WEEKLY_MULTIPLIER (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#59) is too similar to LibLoanContractFIRIntervalMultipliers._8_WEEKLY_MULTIPLIER (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#60)
Variable LibLoanContractFIRIntervalMultipliers._2_WEEKLY_MULTIPLIER (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#57) is too similar to LibLoanContractFIRIntervalMultipliers._8_WEEKLY_MULTIPLIER (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#60)
Variable LibLoanContractFIRIntervalMultipliers._4_WEEKLY_MULTIPLIER (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#58) is too similar to LibLoanContractFIRIntervalMultipliers._8_WEEKLY_MULTIPLIER (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#60)
Variable LibLoanContractTermMaps.LOAN_START_MAP (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#78) is too similar to LibLoanContractTermMaps.LOAN_STATE_MAP (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#72)
Variable LibLoanContractTermMaps.LOAN_START_MASK (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#77) is too similar to LibLoanContractTermMaps.LOAN_STATE_MASK (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#71)
Variable LibLoanContractTermMaps.LOAN_START_POS (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#93) is too similar to LibLoanContractTermMaps.LOAN_STATE_POS (contracts/libraries/helper-libraries/LibLoanContractConstants.sol#90)
Variable DebtTermIndexer._loanStart(DebtTermIndexer.DebtTermMap,uint256)._uLoanStart (contracts/libraries/lending-libraries/DebtTermIndexer.sol#224) is too similar to DebtTermIndexer._loanState(DebtTermIndexer.DebtTermMap,uint256)._uLoanState (contracts/libraries/lending-libraries/DebtTermIndexer.sol#112)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Detectors:
ABDKMath64x64.fromInt(int256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#34-39) uses literals with too many digits:
	- require(bool)(x >= - 0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#36)
ABDKMath64x64.muli(int128,int256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#163-197) uses literals with too many digits:
	- require(bool)(y >= - 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF && y <= 0x1000000000000000000000000000000000000000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#166-169)
ABDKMath64x64.muli(int128,int256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#163-197) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x8000000000000000000000000000000000000000000000000000000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#183-186)
ABDKMath64x64.divi(int256,int256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#254-276) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x80000000000000000000000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#269)
ABDKMath64x64.inv(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#328-335) uses literals with too many digits:
	- result = int256(0x100000000000000000000000000000000) / x (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#331)
ABDKMath64x64.gavg(int128,int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#358-368) uses literals with too many digits:
	- require(bool)(m < 0x4000000000000000000000000000000000000000000000000000000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#362-365)
ABDKMath64x64.pow(int128,uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#378-470) uses literals with too many digits:
	- absResult = 0x100000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#384)
ABDKMath64x64.pow(int128,uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#378-470) uses literals with too many digits:
	- absX <= 0x10000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#386)
ABDKMath64x64.pow(int128,uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#378-470) uses literals with too many digits:
	- absX < 0x1000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#415)
ABDKMath64x64.pow(int128,uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#378-470) uses literals with too many digits:
	- absX < 0x10000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#419)
ABDKMath64x64.pow(int128,uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#378-470) uses literals with too many digits:
	- absX < 0x1000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#423)
ABDKMath64x64.pow(int128,uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#378-470) uses literals with too many digits:
	- absX < 0x10000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#427)
ABDKMath64x64.pow(int128,uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#378-470) uses literals with too many digits:
	- absX < 0x40000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#431)
ABDKMath64x64.pow(int128,uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#378-470) uses literals with too many digits:
	- absX < 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#435)
ABDKMath64x64.pow(int128,uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#378-470) uses literals with too many digits:
	- absResult > 0x100000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#447)
ABDKMath64x64.pow(int128,uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#378-470) uses literals with too many digits:
	- absX >= 0x100000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#454)
ABDKMath64x64.log_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#491-534) uses literals with too many digits:
	- xc >= 0x10000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#497)
ABDKMath64x64.log_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#491-534) uses literals with too many digits:
	- xc >= 0x100000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#501)
ABDKMath64x64.log_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#491-534) uses literals with too many digits:
	- bit = 0x8000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#525)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#564)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x < - 0x400000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#566)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#568)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x8000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#570)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x4000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#572)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x2000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#574)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x1000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#576)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x800000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#578)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x400000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#580)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x200000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#582)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x100000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#584)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x80000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#586)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x40000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#588)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x20000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#590)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x10000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#592)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x8000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#594)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x4000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#596)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x2000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#598)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x1000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#600)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x800000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#602)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x400000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#604)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x200000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#606)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x100000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#608)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#609)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x80000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#610)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#611)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x40000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#612)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#613)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x20000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#614)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#615)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x10000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#616)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#617)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x8000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#618)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#619)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x4000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#620)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#621)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x2000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#622)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#623)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x1000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#624)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#625)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x800000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#626)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#627)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x400000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#628)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#629)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x200000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#630)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#631)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x100000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#632)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#633)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x80000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#634)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#635)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x40000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#636)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#637)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x20000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#638)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#639)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x10000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#640)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#641)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x8000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#642)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#643)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x4000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#644)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#645)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x2000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#646)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#647)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x1000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#648)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#649)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x800000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#650)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#651)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x400000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#652)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#653)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x200000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#654)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#655)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- x & 0x100000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#656)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#657)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#659)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#661)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#663)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#665)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#667)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#669)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#671)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#673)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#675)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#677)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#679)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#681)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#683)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#685)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#687)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#689)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#691)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#693)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#695)
ABDKMath64x64.exp_2(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#562-704) uses literals with too many digits:
	- result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#697)
ABDKMath64x64.exp(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#712-725) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#714)
ABDKMath64x64.exp(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#712-725) uses literals with too many digits:
	- x < - 0x400000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#716)
ABDKMath64x64.divuu(uint256,uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#735-789) uses literals with too many digits:
	- xc >= 0x100000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#746)
ABDKMath64x64.sqrtu(uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#798-842) uses literals with too many digits:
	- xx >= 0x100000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#804)
ABDKMath64x64.sqrtu(uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#798-842) uses literals with too many digits:
	- xx >= 0x10000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#808)
ABDKMath64x64.sqrtu(uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#798-842) uses literals with too many digits:
	- xx >= 0x100000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#812)
ABDKMath64x64.slitherConstructorConstantVariables() (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#16-843) uses literals with too many digits:
	- MIN_64x64 = - 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMath64x64.sol#20)
ABDKMathQuad.fromInt(int256) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#46-63) uses literals with too many digits:
	- result |= 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#58)
ABDKMathQuad.toInt(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#72-93) uses literals with too many digits:
	- result = uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 0x10000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#79-80)
ABDKMathQuad.toInt(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#72-93) uses literals with too many digits:
	- uint128(x) >= 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#85)
ABDKMathQuad.toInt(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#72-93) uses literals with too many digits:
	- require(bool)(result <= 0x8000000000000000000000000000000000000000000000000000000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#86)
ABDKMathQuad.toUInt(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#127-144) uses literals with too many digits:
	- require(bool)(uint128(x) < 0x80000000000000000000000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#133)
ABDKMathQuad.toUInt(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#127-144) uses literals with too many digits:
	- result = uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 0x10000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#136-137)
ABDKMathQuad.from128x128(int256) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#153-170) uses literals with too many digits:
	- result |= 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#165)
ABDKMathQuad.to128x128(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#179-200) uses literals with too many digits:
	- result = uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 0x10000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#186-187)
ABDKMathQuad.to128x128(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#179-200) uses literals with too many digits:
	- uint128(x) >= 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#192)
ABDKMathQuad.to128x128(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#179-200) uses literals with too many digits:
	- require(bool)(result <= 0x8000000000000000000000000000000000000000000000000000000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#193)
ABDKMathQuad.from64x64(int128) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#209-226) uses literals with too many digits:
	- result |= 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#221)
ABDKMathQuad.to64x64(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#235-256) uses literals with too many digits:
	- result = uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 0x10000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#242-243)
ABDKMathQuad.to64x64(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#235-256) uses literals with too many digits:
	- uint128(x) >= 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#248)
ABDKMathQuad.to64x64(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#235-256) uses literals with too many digits:
	- require(bool)(result <= 0x80000000000000000000000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#249)
ABDKMathQuad.fromOctuple(bytes32) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#264-293) uses literals with too many digits:
	- negative = x & 0x8000000000000000000000000000000000000000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#266)
ABDKMathQuad.fromOctuple(bytes32) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#264-293) uses literals with too many digits:
	- significand = (significand | 0x100000000000000000000000000000000000000000000000000000000000) >> 245885 - exponent (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#281)
ABDKMathQuad.fromOctuple(bytes32) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#264-293) uses literals with too many digits:
	- result |= 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#289)
ABDKMathQuad.toOctuple(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#301-325) uses literals with too many digits:
	- uint128(x) >= 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#320)
ABDKMathQuad.toOctuple(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#301-325) uses literals with too many digits:
	- result |= 0x8000000000000000000000000000000000000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#321)
ABDKMathQuad.fromDouble(bytes8) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#333-357) uses literals with too many digits:
	- x & 0x8000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#352)
ABDKMathQuad.fromDouble(bytes8) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#333-357) uses literals with too many digits:
	- result |= 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#353)
ABDKMathQuad.toDouble(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#365-400) uses literals with too many digits:
	- negative = uint128(x) >= 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#367)
ABDKMathQuad.toDouble(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#365-400) uses literals with too many digits:
	- 0x7FF8000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#373)
ABDKMathQuad.toDouble(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#365-400) uses literals with too many digits:
	- significand = (significand | 0x10000000000000000000000000000) >> 15421 - exponent (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#388)
ABDKMathQuad.toDouble(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#365-400) uses literals with too many digits:
	- result |= 0x8000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#396)
ABDKMathQuad.toDouble(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#365-400) uses literals with too many digits:
	- bytes8(0xFFF0000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#374-376)
ABDKMathQuad.toDouble(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#365-400) uses literals with too many digits:
	- bytes8(0x7FF0000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#374-376)
ABDKMathQuad.toDouble(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#365-400) uses literals with too many digits:
	- bytes8(0xFFF0000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#380-382)
ABDKMathQuad.toDouble(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#365-400) uses literals with too many digits:
	- bytes8(0x7FF0000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#380-382)
ABDKMathQuad.toDouble(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#365-400) uses literals with too many digits:
	- bytes8(0x8000000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#384-386)
ABDKMathQuad.toDouble(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#365-400) uses literals with too many digits:
	- bytes8(0x0000000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#384-386)
ABDKMathQuad.isNaN(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#408-413) uses literals with too many digits:
	- uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF > 0x7FFF0000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#410-411)
ABDKMathQuad.isInfinity(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#422-427) uses literals with too many digits:
	- uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0x7FFF0000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#424-425)
ABDKMathQuad.sign(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#436-446) uses literals with too many digits:
	- require(bool)(absoluteX <= 0x7FFF0000000000000000000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#440)
ABDKMathQuad.sign(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#436-446) uses literals with too many digits:
	- uint128(x) >= 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#443)
ABDKMathQuad.cmp(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#456-483) uses literals with too many digits:
	- require(bool)(absoluteX <= 0x7FFF0000000000000000000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#460)
ABDKMathQuad.cmp(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#456-483) uses literals with too many digits:
	- require(bool)(absoluteY <= 0x7FFF0000000000000000000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#464)
ABDKMathQuad.cmp(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#456-483) uses literals with too many digits:
	- require(bool)(x != y || absoluteX < 0x7FFF0000000000000000000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#467)
ABDKMathQuad.cmp(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#456-483) uses literals with too many digits:
	- negativeX = uint128(x) >= 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#471)
ABDKMathQuad.cmp(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#456-483) uses literals with too many digits:
	- negativeY = uint128(y) >= 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#472)
ABDKMathQuad.eq(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#493-500) uses literals with too many digits:
	- uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF < 0x7FFF0000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#496-497)
ABDKMathQuad.add(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#516-619) uses literals with too many digits:
	- xSign = uint128(x) >= 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#528)
ABDKMathQuad.add(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#516-619) uses literals with too many digits:
	- xSignifier |= 0x10000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#531)
ABDKMathQuad.add(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#516-619) uses literals with too many digits:
	- ySign = uint128(y) >= 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#533)
ABDKMathQuad.add(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#516-619) uses literals with too many digits:
	- ySignifier |= 0x10000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#536)
ABDKMathQuad.add(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#516-619) uses literals with too many digits:
	- xSignifier >= 0x20000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#554)
ABDKMathQuad.add(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#516-619) uses literals with too many digits:
	- xSignifier < 0x10000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#562)
ABDKMathQuad.add(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#516-619) uses literals with too many digits:
	- bytes16(uint128(0x80000000000000000000000000000000 | (xExponent << 112) | xSignifier)) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#565-568)
ABDKMathQuad.add(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#516-619) uses literals with too many digits:
	- bytes16(uint128(0x80000000000000000000000000000000 | (xExponent << 112) | xSignifier)) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#611-614)
ABDKMathQuad.sub(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#635-639) uses literals with too many digits:
	- add(x,y ^ 0x80000000000000000000000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#637)
ABDKMathQuad.mul(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#660-725) uses literals with too many digits:
	- x ^ y & 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#667)
ABDKMathQuad.mul(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#660-725) uses literals with too many digits:
	- x ^ y == 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#668)
ABDKMathQuad.mul(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#660-725) uses literals with too many digits:
	- x ^ y & 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#672)
ABDKMathQuad.mul(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#660-725) uses literals with too many digits:
	- y ^ x & 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#676)
ABDKMathQuad.mul(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#660-725) uses literals with too many digits:
	- xSignifier |= 0x10000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#680)
ABDKMathQuad.mul(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#660-725) uses literals with too many digits:
	- ySignifier |= 0x10000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#684)
ABDKMathQuad.mul(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#660-725) uses literals with too many digits:
	- bytes16(uint128(uint128((x ^ y) & 0x80000000000000000000000000000000) | xExponent << 112 | xSignifier)) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#721-722)
ABDKMathQuad.mul(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#660-725) uses literals with too many digits:
	- (x ^ y) & 0x80000000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#688-689)
ABDKMathQuad.mul(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#660-725) uses literals with too many digits:
	- xSignifier >= 0x200000000000000000000000000000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#693-696)
ABDKMathQuad.mul(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#660-725) uses literals with too many digits:
	- xSignifier >= 0x100000000000000000000000000000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#693-696)
ABDKMathQuad.div(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#761-833) uses literals with too many digits:
	- x ^ y & 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#768)
ABDKMathQuad.div(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#761-833) uses literals with too many digits:
	- POSITIVE_ZERO | (x ^ y) & 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#771)
ABDKMathQuad.div(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#761-833) uses literals with too many digits:
	- POSITIVE_INFINITY | (x ^ y) & 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#774)
ABDKMathQuad.div(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#761-833) uses literals with too many digits:
	- ySignifier |= 0x10000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#778)
ABDKMathQuad.div(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#761-833) uses literals with too many digits:
	- xSignifier = (xSignifier | 0x10000000000000000000000000000) << 114 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#792)
ABDKMathQuad.div(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#761-833) uses literals with too many digits:
	- assert(bool)(xSignifier >= 0x1000000000000000000000000000) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#800)
ABDKMathQuad.div(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#761-833) uses literals with too many digits:
	- bytes16(uint128(uint128((x ^ y) & 0x80000000000000000000000000000000) | xExponent << 112 | xSignifier)) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#829-830)
ABDKMathQuad.div(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#761-833) uses literals with too many digits:
	- (x ^ y) & 0x80000000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#797-798)
ABDKMathQuad.div(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#761-833) uses literals with too many digits:
	- xSignifier >= 0x80000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#802-805)
ABDKMathQuad.div(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#761-833) uses literals with too many digits:
	- xSignifier >= 0x40000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#802-805)
ABDKMathQuad.div(bytes16,bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#761-833) uses literals with too many digits:
	- xSignifier >= 0x20000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#802-805)
ABDKMathQuad.neg(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#841-845) uses literals with too many digits:
	- x ^ 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#843)
ABDKMathQuad.sqrt(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#865-916) uses literals with too many digits:
	- uint128(x) > 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#867)
ABDKMathQuad.sqrt(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#865-916) uses literals with too many digits:
	- xSignifier |= 0x10000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#874)
ABDKMathQuad.sqrt(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#865-916) uses literals with too many digits:
	- xSignifier >= 0x10000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#882)
ABDKMathQuad.sqrt(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#865-916) uses literals with too many digits:
	- xSignifier >= 0x10000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#891)
ABDKMathQuad.sqrt(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#865-916) uses literals with too many digits:
	- r = 0x10000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#901)
ABDKMathQuad.log_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#924-981) uses literals with too many digits:
	- uint128(x) > 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#926)
ABDKMathQuad.log_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#924-981) uses literals with too many digits:
	- x == 0x3FFF0000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#927)
ABDKMathQuad.log_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#924-981) uses literals with too many digits:
	- xSignifier |= 0x10000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#934)
ABDKMathQuad.log_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#924-981) uses literals with too many digits:
	- xSignifier >= 0x10000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#948)
ABDKMathQuad.log_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#924-981) uses literals with too many digits:
	- xSignifier == 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#958)
ABDKMathQuad.log_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#924-981) uses literals with too many digits:
	- resultSignifier < 0x10000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#965)
ABDKMathQuad.log_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#924-981) uses literals with too many digits:
	- bytes16(uint128(0x80000000000000000000000000000000 | resultExponent << 112 | resultSignifier & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#976-977)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xNegative = uint128(x) > 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1003)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- 0x3FFF0000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1011)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier |= 0x10000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1014)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xNegative && xSignifier > 0x406E00000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1021)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1034)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x80000000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1035)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x40000000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1036)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x20000000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1037)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x10000000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1038)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x8000000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1039)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x4000000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1040)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x2000000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1041)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x1000000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1042)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x800000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1043)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x400000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1044)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x200000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1045)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x100000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1046)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x80000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1047)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x40000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1048)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x20000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1049)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x10000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1050)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x8000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1051)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x4000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1052)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x2000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1053)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x1000000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1054)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000B1721BCFC99D9F890EA06911763 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1054)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x800000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1055)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1055)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x400000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1056)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1056)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x200000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1057)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000162E430E5A18F6119E3C02282A5 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1057)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x100000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1058)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000B1721835514B86E6D96EFD1BFE >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1058)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x80000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1059)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1059)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x40000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1060)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000002C5C8601CC6B9E94213C72737A >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1060)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x20000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1061)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000162E42FFF037DF38AA2B219F06 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1061)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x10000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1062)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000B17217FBA9C739AA5819F44F9 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1062)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x8000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1063)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1063)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x4000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1064)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1064)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x2000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1065)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000162E42FF0999CE3541B9FFFCF >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1065)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x1000000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1066)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000B17217F80F4EF5AADDA45554 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1066)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x800000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1067)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000058B90BFBF8479BD5A81B51AD >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1067)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x400000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1068)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1068)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x200000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1069)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000162E42FEFB2FED257559BDAA >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1069)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x100000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1070)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1070)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x80000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1071)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1071)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x40000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1072)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1072)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x20000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1073)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000162E42FEFA494F1478FDE05 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1073)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x10000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1074)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000B17217F7D20CF927C8E94C >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1074)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x8000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1075)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1075)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x4000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1076)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000002C5C85FDF477B662B26945 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1076)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x2000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1077)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000162E42FEFA3AE53369388C >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1077)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x1000000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1078)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000B17217F7D1D351A389D40 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1078)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x800000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1079)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1079)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x400000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1080)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000002C5C85FDF4741BEA6E77E >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1080)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x200000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1081)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000162E42FEFA39FE95583C2 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1081)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x100000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1082)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000B17217F7D1CFB72B45E1 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1082)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x80000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1083)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1083)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x40000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1084)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000002C5C85FDF473E242EA38 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1084)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x20000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1085)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000162E42FEFA39F02B772C >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1085)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x10000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1086)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000B17217F7D1CF7D83C1A >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1086)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x8000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1087)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1087)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x4000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1088)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000002C5C85FDF473DEA871F >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1088)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x2000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1089)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000162E42FEFA39EF44D91 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1089)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x1000000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1090)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000B17217F7D1CF79E949 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1090)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x800000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1091)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000058B90BFBE8E7BCE544 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1091)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x400000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1092)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000002C5C85FDF473DE6ECA >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1092)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x200000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1093)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000162E42FEFA39EF366F >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1093)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x100000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1094)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000B17217F7D1CF79AFA >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1094)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x80000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1095)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000058B90BFBE8E7BCD6D >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1095)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x40000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1096)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000002C5C85FDF473DE6B2 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1096)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x20000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1097)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000162E42FEFA39EF358 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1097)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x10000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1098)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000B17217F7D1CF79AB >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1098)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x8000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1099)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000058B90BFBE8E7BCD5 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1099)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x4000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1100)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000002C5C85FDF473DE6A >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1100)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x2000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1101)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000162E42FEFA39EF34 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1101)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x1000000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1102)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000B17217F7D1CF799 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1102)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x800000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1103)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000058B90BFBE8E7BCC >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1103)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x400000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1104)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000002C5C85FDF473DE5 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1104)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x200000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1105)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000162E42FEFA39EF2 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1105)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x100000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1106)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000000B17217F7D1CF78 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1106)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x80000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1107)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000058B90BFBE8E7BB >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1107)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x40000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1108)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000002C5C85FDF473DD >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1108)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x20000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1109)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000000162E42FEFA39EE >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1109)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x10000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1110)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000000B17217F7D1CF6 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1110)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x8000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1111)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000000058B90BFBE8E7A >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1111)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x4000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1112)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000002C5C85FDF473C >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1112)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x2000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1113)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000000162E42FEFA39D >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1113)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x1000000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1114)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000000B17217F7D1CE >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1114)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x800000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1115)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000000058B90BFBE8E6 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1115)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x400000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1116)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000000002C5C85FDF472 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1116)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x200000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1117)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000000162E42FEFA38 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1117)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x100000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1118)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000000000B17217F7D1B >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1118)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x80000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1119)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000000058B90BFBE8D >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1119)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x40000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1120)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000000002C5C85FDF46 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1120)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x20000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1121)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000000000162E42FEFA2 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1121)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x10000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1122)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000000000B17217F7D0 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1122)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x8000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1123)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000000000058B90BFBE7 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1123)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x4000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1124)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000000002C5C85FDF3 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1124)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x2000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1125)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000000000162E42FEF9 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1125)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x1000000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1126)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000000000B17217F7C >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1126)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x800000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1127)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000000000058B90BFBD >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1127)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x400000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1128)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000000000002C5C85FDE >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1128)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x200000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1129)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000000000162E42FEE >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1129)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x100000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1130)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000000000000B17217F6 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1130)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x80000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1131)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000000000058B90BFA >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1131)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x40000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1132)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000000000002C5C85FC >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1132)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x20000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1133)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000000000000162E42FD >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1133)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x10000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1134)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000000000000B17217E >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1134)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x8000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1135)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000000000000058B90BE >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1135)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x4000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1136)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000000000002C5C85E >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1136)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x2000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1137)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000000000000162E42E >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1137)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x1000000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1138)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000000000000B17216 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1138)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x800000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1139)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000000000000058B90A >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1139)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x400000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1140)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000000000000002C5C84 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1140)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x200000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1141)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000000000000162E41 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1141)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- xSignifier & 0x100000 > 0 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1142)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000000000000000B1720 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1142)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000000000000058B8F >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1143)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000000000000002C5C7 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1144)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000000000000000162E3 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1145)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000000000000000B171 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1146)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000000000000000058B8 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1147)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000000000000002C5B >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1148)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000000000000000162D >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1149)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000000000000000B16 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1150)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000000000000000058A >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1151)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000000000000000002C4 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1152)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000000000000000161 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1153)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x1000000000000000000000000000000B0 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1154)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000000000000000057 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1155)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000000000000000002B >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1156)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000000000000000015 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1157)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x10000000000000000000000000000000A >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1158)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000000000000000004 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1159)
ABDKMathQuad.pow_2(bytes16) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1001-1176) uses literals with too many digits:
	- resultSignifier = resultSignifier * 0x100000000000000000000000000000001 >> 128 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1160)
ABDKMathQuad.mostSignificantBit(uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1197-1214) uses literals with too many digits:
	- x >= 0x100000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1203)
ABDKMathQuad.mostSignificantBit(uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1197-1214) uses literals with too many digits:
	- x >= 0x10000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1204)
ABDKMathQuad.mostSignificantBit(uint256) (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1197-1214) uses literals with too many digits:
	- x >= 0x100000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#1205)
ABDKMathQuad.slitherConstructorConstantVariables() (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#14-1215) uses literals with too many digits:
	- POSITIVE_ZERO = 0x00000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#18)
ABDKMathQuad.slitherConstructorConstantVariables() (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#14-1215) uses literals with too many digits:
	- NEGATIVE_ZERO = 0x80000000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#23)
ABDKMathQuad.slitherConstructorConstantVariables() (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#14-1215) uses literals with too many digits:
	- POSITIVE_INFINITY = 0x7FFF0000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#28)
ABDKMathQuad.slitherConstructorConstantVariables() (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#14-1215) uses literals with too many digits:
	- NEGATIVE_INFINITY = 0xFFFF0000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#33)
ABDKMathQuad.slitherConstructorConstantVariables() (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#14-1215) uses literals with too many digits:
	- NaN = 0x7FFF8000000000000000000000000000 (contracts/libraries/abdk-libraries-solidity/ABDKMathQuad.sol#38)
AnzaGovernanceToken.slitherConstructorVariables() (contracts/tokens/AnzaGovernanceToken.sol#6-34) uses literals with too many digits:
	- tokenSupply = 1000000000000 (contracts/tokens/AnzaGovernanceToken.sol#7)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Detectors:
LoanTreasurey (contracts/services/LoanTreasurey.sol#14-166) does not implement functions:
	- ILoanTreasurey.depositPayment(uint256) (contracts/services/interfaces/ILoanTreasurey.sol#10)
	- ILoanTreasurey.sponsorPayment(address,uint256) (contracts/services/interfaces/ILoanTreasurey.sol#5-8)
	- ILoanTreasurey.withdrawCollateral(uint256) (contracts/services/interfaces/ILoanTreasurey.sol#14)
	- ILoanTreasurey.withdrawFromBalance(uint256) (contracts/services/interfaces/ILoanTreasurey.sol#12)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unimplemented-functions
INFO:Detectors:
AnzaBaseMarketParticipant._proceeds (contracts/databases/market-databases/AnzaBaseMarketParticipant.sol#11) is never used in AnzaDebtMarket (contracts/markets/AnzaDebtMarket.sol#16-123)
AnzaBaseMarketParticipant._canceledListings (contracts/databases/market-databases/AnzaBaseMarketParticipant.sol#12) is never used in AnzaDebtMarket (contracts/markets/AnzaDebtMarket.sol#16-123)
AnzaBaseMarketParticipant._proceeds (contracts/databases/market-databases/AnzaBaseMarketParticipant.sol#11) is never used in AnzaDebtStorefront (contracts/markets/storefronts/AnzaDebtStorefront.sol#13-311)
AnzaBaseMarketParticipant._proceeds (contracts/databases/market-databases/AnzaBaseMarketParticipant.sol#11) is never used in AnzaRefinanceStorefront (contracts/markets/storefronts/AnzaRefinanceStorefront.sol#14-307)
AnzaBaseMarketParticipant._proceeds (contracts/databases/market-databases/AnzaBaseMarketParticipant.sol#11) is never used in AnzaSponsorshipStorefront (contracts/markets/storefronts/AnzaSponsorshipStorefront.sol#14-291)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable
INFO:Detectors:
AnzaGovernanceToken.tokenSupply (contracts/tokens/AnzaGovernanceToken.sol#7) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Slither:. analyzed (137 contracts with 85 detectors), 1355 result(s) found
